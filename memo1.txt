





★☆瓦版☆★
メアド:artis.kyosuke0530@gmail.com
PASS:ierjhgioeroijhuidshf
https://kawaraban.jp/wp-admin/edit.php?post_type=post

★☆グランクルール案件☆★


そういえば自分が WordPress 使うときはいつも Windows 上で Linux 走らせて Docker で WordPress 環境組み上げてしてるか、指定されたサーバ上の WordPress をいじってるなぁ、Local って使ったことないわ・・・
というわけで Local もどんなもんかと調べてみましたが、
ファイルが目の前の PC 上にあるかサーバ上にあるかの違いだけでやることできること大して変わりません

https://qiita.com/9ever/items/2493afd47b73a5ba1827
上記解説ページの内容に合わせるなら、
「HTMLをWordPressのテーマフォルダへ入れる」のフォルダが
Local Site\myfirsttest\app\public\wp-content\themes
から
\\192.168.0.201\artis\gc\wordpress\wp-content\themes
に変わるだけ。
作ったサイトを開く Local by flywheel ってのが http://192.168.0.201:9696 に変わるだけ。
ファイルをどういじればいいかってのは、あとは一緒よ。
実際の案件になれば当然に「他の人と協働で」ってことが多いはずなので、この機会に慣れてほしい:meow_bongo-keyboard:

----------------------------------------------
★WP

●管理画面ログイン
　メールアドレス : dev-email@wpengine.local
　ID : artis
　PW : password

〇php ファイル等に直接アクセス
　\\192.168.0.201\artis\gc\wordpress

〇データベースを覗きたい
　http://192.168.0.201:9695
　ID : artis
　PW : password
※WP　PWに困ったらブックマークを参照




9:20 2025/01/23
★ライティング？
・ユーリードのCMS
　ムーバブルタイプ




9:39 2025/01/22

☆お片付け、12時45分までにお片付けをお願いします（先週末から再度こちらのスケジュールとなりました）
また、炊飯釜に残ったお米の片付けもお願いします！余った際は冷凍庫に入れてください。


10:53 2025/01/22
★Local

▽
最初に行うべきは GrandCouluer のテーマ作成、

それからヘッダ、フッタの切り出し、各ページ本体部分の切り出し・・・かな？


--------------------------------------------

☆☆☆

★WordPress 化の話、動き始めましょう。

●グランクルールWebSite構築場所
	http://192.168.0.201:9696
●ダッシュボード
　http://192.168.0.201:9696/wp-admin/
	ID : artis
	PW : password
●php ファイル等に直接アクセス
	\\192.168.0.201\artis\gc\wordpress
●データベースを覗きたい
　http://192.168.0.201:9695
	ID : artis
	PW : password

★
WP前　http://192.168.0.201/GrandCouleur/



★アルティス内のサーバに「WordPress として動くもの」を構築してから、本番環境に　　　　データ引っ越しという手順になります。

※アルティス内サーバは http://192.168.0.201:9696 を用意しました。
　ここに「WordPress 版グランクルール」を構築していきましょう。

※ダッシュボードがお約束どおりの http://192.168.0.201:9696/wp-admin/
※php ファイルを直接いじる必要がある等の用向きは \\192.168.0.201\artis\gc
　\wordpress でアクセスしてください。

▽
最初に行うべきは GrandCouluer のテーマ作成、
それからヘッダ、フッタの切り出し、各ページ本体部分の切り出し・・・かな？
こちらは大谷さんお願いします。

▽
宮崎さんはどういう作業が進んでいるか、なんとなーく眺めるか大谷さんを質問攻めにするかしてください。
画像等のアップロードはこちらで進めておきます。
特に締切等はないようですので、病まない程度にやっていきましょう:meow_bongo-keyboard:



小林雅美/Artis
@上田 貴大/Favors Creation
 cc: 
@AR西澤 彩

グランクルールWebSite、全ページの電話番号を更新しました。本番環境適用済みです。
変更前：080-3295-5572
変更後：011-600-0998
04-グランクルールwebsite への投稿 | 1月8日 | メッセージを確認する

----------index.php---------------------------------

<?php get_header(); ?>

  <div class="overlay">
    <span class="material-icons" id="close">close</span>
    <nav>
      <ul>
        <li><a href="<?php echo esc_url(home_url('/')); ?>index/">トップページ</a></li>
        <li><a href="<?php echo esc_url(home_url('/')); ?>about/">当事業所について</a></li>
        <li><a href="<?php echo esc_url(home_url('/')); ?>job/">業務内容</a></li>
        <li><a href="<?php echo esc_url(home_url('/')); ?>usage/">ご利用の流れ</a></li>
        <li><a href="<?php echo esc_url(home_url('/')); ?>access_contact/">アクセス・お問い合わせ</a></li>
      </ul>
    </nav>
  </div>

  <div class="index-hero"></div>
  <p class="top-desc">
    札幌市営地下鉄東豊線「東区役所前駅」<br class="sp-enabled">4番出口から徒歩1分の、<br>
    就労継続支援A型事業所です。
  </p>

  <div class="desc-wrapper">
    <div class="desc-index">
      <h2>job description</h2>
      <p class="desc-jp">業務内容</p>
    </div>
  </div>
  <main>
    <div class="main-block">
      <img src="<?php echo get_stylesheet_directory_url(); ?>/img/food.jpg" alt="飲食事業(どさんこシェフ／ゔぇーるくれーる)">
      <p>飲食事業(どさんこシェフ／ゔぇーるくれーる)</p>
    </div>
    <div class="main-block">
      <img src="<?php echo get_stylesheet_directory_url(); ?>/img/programming.jpg" alt="Webページ制作">
      <p>Webページ制作</p>
    </div>
    <div class="main-block">
      <img src="<?php echo get_stylesheet_directory_url(); ?>/img/movie.jpg" alt="動画編集">
      <p>動画編集</p>
    </div>
    <div class="main-block">
      <img src="<?php echo get_stylesheet_directory_url(); ?>/img/design.jpg" alt="各種デザイン制作">
      <p>各種デザイン制作</p>
    </div>
    <div class="main-block sm-rltv">
      <img src="<?php echo get_stylesheet_directory_url(); ?>/img/pc_work.jpg" alt="パソコン作業">
      <p>パソコン作業</p>
    </div>
    <div class="showmore-button">
      <a href="<?php echo esc_url(home_url('/')); ?>job/">
        <p>さらに詳しく知りたい方はこちら</p>
        <div class="showmore">Show more</div>
      </a>
    </div>
  </main>

  <section class="main-bottom">
    <a href="<?php echo esc_url(home_url('/')); ?>access_contact/#contact" class="contact-button">
      <h2><span>Contact Us</span></h2>
      <p class="desc-jp">お問い合わせ</p>
    </a>
  </section>

  <div id="arrowup">
    <span class="material-icons">keyboard_arrow_up</span>
  </div>

<?php get_footer(); ?>


-------------header.php------------------------


<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link rel="stylesheet" href="<?php echo get_stylesheet_directory_url(); ?>/css/reset.css">
  <link rel="stylesheet" href="<?php echo get_stylesheet_directory_url(); ?>/style.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Serif+JP:wght@200..900&display=swap" rel="stylesheet">
  <title>Grand Couleur</title>
<?php wp_head(); ?>  
</head>

<body>
  <header>
    <h1><a href="<?php echo esc_url(home_url('/')); ?>"><img src="<?php echo get_stylesheet_directory_url(); ?>/img/logo_header.svg" alt="logo"></a></h1>
    <nav>
      <ul>
        <li><a href="<?php echo esc_url(home_url('/')); ?>about/">当事業所について</a></li>
        <li><a href="<?php echo esc_url(home_url('/')); ?>job/">業務内容</a></li>
        <br class="tb-enable">
        <li><a href="<?php echo esc_url(home_url('/')); ?>usage/">ご利用の流れ</a></li>
        <li><a href="<?php echo esc_url(home_url('/')); ?>access_contact/">アクセス・お問い合わせ</a></li>
      </ul>
    </nav>
    <span class="material-icons" id="open">
      menu
    </span>
  </header>



-------------footer.php------------------------

  <footer>
    <a href="<?php echo esc_url(home_url('/')); ?>#"><img src="<?php echo get_stylesheet_directory_url(); ?>/img/logo_footer.svg" alt="logo" class="footer-logo"></a>
    <div class="footer-info">
      <p>
        〒065-0012<br>
        札幌市東区北12条東7丁目1-15セレスタ札幌1F<br>
        <span class="sm">【札幌市営地下鉄東豊線　東区役所前駅4番出口から徒歩1分】</span>
        <br>
        <br>
        【TEL】<a href="tel:011-600-0998" class="footer-tel-number">011-600-0998</a>（平日10:00～17:00）<br>
        【Mail】<a href="mailto:grancouleur@gmail.com" class="mail">grancouleur@gmail.com</a>
      </p>
    </div>
    <nav>
      <ul>
        <li><a href="<?php echo esc_url(home_url('/')); ?>about/">当事業所について</a></li>
        <li>／</li>
        <li><a href="<?php echo esc_url(home_url('/')); ?>job/">業務内容</a></li>
        <li>／</li>
        <li><a href="<?php echo esc_url(home_url('/')); ?>usage/">ご利用の流れ</a></li>
        <li>／</li>
        <li><a href="<?php echo esc_url(home_url('/')); ?>access_contact/">アクセス・会社概要</a></li>
        <li>／</li>
        <li><a href="<?php echo esc_url(home_url('/')); ?>access_contact/#contact">お問い合わせ</a></li>
      </ul>
    </nav>
  </footer>
  <div class="copyright">
    Copyright 2024 Grand Couleur inc.
  </div>

  <script src="<?php echo get_stylesheet_directory_url(); ?>/js/main.js"></script>

</body>

</html>

<?php
/**
 * Front to the WordPress application. This file doesn't do anything, but loads
 * wp-blog-header.php which does and tells WordPress to load the theme.
 *
 * @package WordPress
 */

/**
 * Tells WordPress to load the WordPress theme and output it.
 *
 * @var bool
 */
define( 'WP_USE_THEMES', true );

/** Loads the WordPress Environment and Template */
require __DIR__ . '/wp-blog-header.php';
?>






-----------------style.css------------------------------

@charset "UTF-8";
/*
Theme Name: 合同会社 Grand Couleur
Description: 合同会社 Grand Couleur様用のテンプレートです
Version: 1.0
Author: K.Otani
*/

* {
  font-size: 16px;
  color: #333333;

  /* <uniquifier>: Use a unique and descriptive class name
   <weight>: Use a value from 200 to 900 */

  font-family: "Noto Serif JP", serif;
  font-optical-sizing: auto;
  font-weight: normal;
  font-style: normal;
}

@media (min-width:600px) {

  /* 600px以上の時（HPサイズの時） */
  * {
    font-size: 0.83vw;
  }
}

header {
  padding: 0.7rem 8vw;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #587CAD;
}

header img {
  width: 11.25rem;
}

header nav {
  display: none;
  width: 12.5rem;
  white-space: nowrap;
}

#open {
  font-size: 2.5rem;
  color: #ffffff;
  cursor: pointer;
}

#close {
  color: #333333;
  cursor: pointer;
  z-index: 1;
}

#open.hide {
  display: none;
}

@media (min-width:600px) {

  /* 600px以上の時（HPサイズの時） */
  header {
    height: 120px;
    padding: 0rem 4.5em;
    font-size: 16px;
  }

  header img {
    width: 328px;
  }

  header nav {
    display: block;
    flex-wrap: wrap;
    width: 12.5em;
    font-size: 16px;
  }

  header nav ul {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-end;
  }

  header nav ul li {
    display: inline-block;

  }

  header nav ul li a {
    margin-left: 2vw;
    text-decoration: none;
    color: #ffffff;
    font-size: 20px;
  }

  #open {
    display: none;
  }
}

@media (min-width:750px) {
  header nav {
    width: 20em;
  }
}

@media (min-width:850px) {
  header nav {
    width: 25em;
  }
}

@media (min-width:900px) {
  header nav {
    width: auto;
  }
}

/* common */

.overlay {
  position: fixed;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  background: rgba(255, 255, 255, 0.95);
  text-align: center;
  padding: 64px;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.6s;
  z-index: 3;
}

.overlay.show {
  opacity: 0.95;
  pointer-events: auto;
}

.overlay #close {
  position: absolute;
  top: 1rem;
  right: 2rem;
  cursor: pointer;
}

.overlay li {
  margin-top: 5rem;
  opacity: 0;
  transform: translateY(16px);
  transition: opacity 0.3s, transform 0.3s;
}

.overlay a {
  text-decoration: none;
  color: #333333;
}

.overlay.show li {
  opacity: 1;
  transform: none;
}

.overlay.show li:nth-child(1) {
  transition-delay: 0.1s;
}

.overlay.show li:nth-child(2) {
  transition-delay: 0.2s;
}

.overlay.show li:nth-child(3) {
  transition-delay: 0.3s;
}

.overlay.show li:nth-child(4) {
  transition-delay: 0.4s;
}

.overlay.show li:nth-child(5) {
  transition-delay: 0.5s;
}

.index-hero {
  width: 100%;
  height: 48vw;
  background-image: url(./img/4-IMG_5433.jpg);
  background-size: cover;
}

.job-hero {
  width: 100%;
  height: 48vw;
  background-image: url(./img/IMG_5427.jpg);
  background-size: cover;
}

.usage-hero {
  width: 100%;
  height: 48vw;
  background-image: url(./img/IMG_5451.jpg);
  background-size: cover;
}

.about-hero {
  width: 100%;
  height: 48vw;
  background-image: url(./img/7-IMG_5437.jpg);
  background-size: cover;
}

.access_contact-hero {
  width: 100%;
  height: 48vw;
  background-image: url(./img/IMG_5440.jpg);
  background-size: cover;
}

.desc-space {
  margin-top: 1.3rem;
}

.desc {
  width: 100%;
  margin: 0 auto 1rem;
  text-align: center;
  border-top: 1px solid #333333;
  border-bottom: 1px solid #333333;
  color: #333333;
}

h2 {
  margin: 0.8em auto 0.3em;
  display: flex;
  justify-content: center;
  font-size: 1rem;
  font-weight: bold;
  letter-spacing: 0.15rem;
  text-align: center;
  line-height: 0.8rem;
  white-space: nowrap;
  color: #333333;
}

.contact-button {
  display: block;
  width: 100%;
  height: 4.6rem;
  margin: 3rem auto;
  padding-top: 2.5vw;
  box-shadow: 0px 2px 10px #ddd;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s ease 0s;
}

.contact-button h2 {
  display: flex;
  align-items: baseline;
  font-size: 1rem;
  color: #333333;

}

.contact-button h2 span {
  padding: 0 0.75rem;
}

.contact-button h2::before,
.contact-button h2::after {
  content: "";
  display: inline-block;
  width: 16vw;
  height: 1px;
  vertical-align: baseline;
  background-color: #333333;
}

.contact-button:hover {
  background: #587CAD;

}

.contact-button:hover h2 span,
.contact-button:hover p {
  color: #ffffff;
}

.contact-button:hover h2::before,
.contact-button:hover h2::after {
  background: #ffffff;
}

.desc-jp {
  display: inline-block;
  margin: 0 0 0.3rem;
  font-size: 0.68rem;
  text-align: left;
  line-height: 1.2rem;
}

.contact-button .desc-jp {
  font-size: 0.44rem;
  letter-spacing: 0.15em;
}

.pc-enabled {
  display: none;
}

.sp-enabled {
  display: inline-block;
}

@media (min-width:600px) {

  /* 600px以上の時（HPサイズの時） */
  .index-hero {
    height: 32vw;
  }

  .job-hero {
    height: 32vw;
  }

  .usage-hero {
    height: 32vw;
  }

  .about-hero {
    height: 32vw;
  }

  .access_contact-hero {
    height: 32vw;
  }

  .desc {
    width: 12vw;
    margin: 0 auto 2.5em;
  }

  h2 {
    margin: 1em auto 0.6em;
    font-size: 1.3vw;
    margin: 1em auto 0.6em;
    line-height: 0.2em;
    color: #333333;
  }

  .desc-jp {
    margin: -0.46vw 0 0.33vw;
    font-size: 0.83vw;
    line-height: 1.4vw;
  }

  .contact-button {
    width: 47vw;
    height: 10.4vw;
    margin: 4.58vw auto;
    padding-top: 2.5vw;
  }

  .contact-button h2 {
    font-size: 2vw;
  }

  .contact-button .desc-jp {
    margin-top: -0.8em;
    font-size: 0.83vw;
  }

  .contact-button h2 span {
    padding: 0 4vw;
    font-size: 2vw;
  }

  .contact-button h2::before,
  .contact-button h2::after {
    width: 8.3vw;
    height: 0.01em;
  }

  .desc-space {
    margin-top: 2.33vw;
  }

  .pc-enabled {
    display: initial;
  }


  .sp-enabled {
    display: none;
  }

  /* .about-block-center-child li .sp-enabled {
    display: none;    
  } */
}


/* index.html */

.top-desc {
  margin: 1.2rem auto 1rem;
  text-align: center;
  font-size: 1rem;
  line-height: 1.5rem;
}

.desc-wrapper {
  padding: 0 7.5vw;
}

.desc-index {
  width: 100%;
  margin: 0 auto 1rem;

  text-align: center;
  border-top: 1px solid #333333;
  border-bottom: 1px solid #333333;
  color: #333333;
}

main {
  margin: 0 auto;
  padding: 0 7.5vw;
  display: block;
  flex-wrap: nowrap;
  gap: 1.5rem 0;
}

.main-block {
  margin-bottom: 2rem;
  border-bottom: 1px solid #333333;
}

.main-block img,
.main-block-job img {
  width: 100%;
}

.main-block p {
  font-size: 0.875rem;
  text-align: center;
  padding: 0.625rem 0;
}

.showmore-button {
  width: 100%;
  height: 3.5rem;
  margin: 1.5rem auto 5rem;
  box-shadow: 0px 2px 10px #ddd;
  border-radius: 50px 50px;
  text-align: center;
}

.showmore-button a {
  text-decoration: none;
}

.showmore-button p {
  font-size: 0.625rem;
  padding-top: 0.5rem;
  color: #333333;
}

.showmore {
  padding-top: 0.1em;
  font-size: 1.125rem;
  letter-spacing: 0.1em;
  color: #333333;
}

.main-bottom {
  /* margin: 1rem 2.5rem; */
  padding: 0 7.5vw;
}


@media (min-width:600px) {
  /* 600px以上の時（HPサイズの時） */

  .top-desc {
    margin: 1.7em auto;
    font-size: 1.56vw;
    line-height: 1.8em;
  }

  .desc-wrapper {
    margin: 0 auto 2.5em;
    width: 12vw;
    padding: 0;
  }

  main {
    padding: 0;
    width: 77vw;
    display: flex;
    flex-wrap: wrap;
    gap: 1.8vw 4vw;
  }

  .main-block {
    margin-bottom: 0;
  }

  .main-block img,
  .main-block-job img {
    position: relative;
    width: 36.5vw;
    height: 26vw;
  }

  .main-block p {
    font-size: 1vw;
    padding: 0.52vw 0;
  }

  .showmore-button {
    width: 36.5vw;
    height: 5.2vw;
    margin: 10vw 0;
    padding-bottom: 0.5em;
  }

  .showmore-button p {
    font-size: 0.83vw;
    padding: 1em 0 0.4em;
    color: #333333;
  }

  .showmore {
    font-size: 1.82vw;
    color: #333333;
  }

  .right {
    font-size: 1.5vw;
  }

  .main-buttom {
    margin: 4rem 0;
  }
}

@media (min-width:1100px) {
  .contact-button {
    width: 47vw;
  }
}


/* footer */

footer {
  background: #587CAD;
  width: 100%;
  height: 16.5rem;
  position: relative;
}

.footer-logo {
  width: 18.75rem;
  padding-top: 2rem;
  margin: 0 auto;
  display: flex;
}

.footer-info {
  position: static;
  margin: 1rem auto;
  text-align: center;
}

.footer-info p {
  display: inline-block;
  text-align: left;
  font-size: 0.875rem;
  color: #ffffff;
  line-height: 1.25em;
}

.footer-info p .sm {
  font-size: 0.75rem;
  color: #ffffff;
}

.footer-tel-number {
  text-decoration: none;
  font-size: 0.875rem;
}

.mail {
  font-size: 0.875rem;
  text-decoration: none;
}

footer nav {
  margin: 1.25rem auto;
  display: flex;
  justify-content: center;
  text-align: center;
}

footer nav ul {
  display: flex;
}

footer nav ul li {
  padding: 0 0.1rem;
  color: #ffffff;
  font-size: 0.55rem;
  white-space: nowrap;
}

footer nav ul li a {
  font-size: 0.55rem;
  text-decoration: none;
}

.copyright {
  padding: 0.5rem;
  text-align: center;
  font-size: 0.625rem;
  color: #ffffff;
  background: #4C596C;
}

@media (min-width:600px) {

  /* 600px以上の時（HPサイズの時） */
  footer {
    font-size: 16px;
    height: 28.125em;
  }

  .footer-logo {
    font-size: 16px;
    width: 37.5em;
    padding-top: 3.125em;
  }

  .footer-info {
    margin: 3em 0 0 -30vw;
    line-height: 1.5em;
    font-size: 16px;
  }

  .footer-info p {
    font-size: 1em;
    line-height: 1.5em;
  }

  .footer-info p .sm {
    font-size: 0.875em;
  }

  .footer-tel-number {
    font-size: 1em;
    pointer-events: none;
  }

  .mail {
    font-size: 1em;
  }

  .sm {
    font-size: 0.875em;
  }

  footer nav {
    font-size: 16px;
    margin-top: 2.9em;
  }

  footer nav ul li {
    padding: 0 1vw;
    font-size: 14px;
  }

  footer nav ul li a {
    font-size: 14px;
    text-decoration: none;
  }

  .copyright {
    padding: 1rem;
    font-size: 0.875em;
  }
}


/* arrow-up */

#arrowup {
  position: fixed;
  right: 2rem;
  bottom: 5rem;
  width: 70px;
  height: 70px;
  background: #ffffff;
  border-radius: 50%;
  box-shadow: 0px 2px 10px #ddd;
  z-index: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: all 0.3s ease 0s;
  opacity: 0;
  visibility: hidden;
}

#arrowup:hover {
  color: #ffffff;
  background: gray;
}

#arrowup.hide {
  display: none;
}

#arrowup.is-visible {
  opacity: 1;
  visibility: visible;
}

.material-icons {
  font-size: 3rem;
  z-index: 2;
}

@media (min-width:600px) {

  /* 600px以上の時（HPサイズの時） */
  #arrowup {
    right: 4rem;
  }
}


/* about.html */

.desc-about {
  width: 17.5rem;
  margin: 0 auto 1rem;
  text-align: center;
  border-top: 1px solid #333333;
  border-bottom: 1px solid #333333;
  color: #333333;
}

.main-about {
  padding: 0 1.4rem;
  margin-top: 2rem;
}

h3 {
  margin: 0.5rem auto;
  font-size: 1.38rem;
  line-height: 1.5em;
  text-align: center;
  color: #333333;
}

.desc-left {
  margin: 0 auto;
  line-height: 1.2em;
  color: #333333;
}

.desc-left li {
  margin-top: 2em;
  padding-left: 0.5em;
  font-size: 0.79rem;
}

.desc-left li:not(:first-child) {
  margin-top: 2em;
}

.about-top {

  /*  display: inline-block; */

  display: block;

  text-align: left;
  font-size: 0.79rem;

  /*  font-size: 0.87rem; */

  line-height: 1.2rem;
  width: 18.37rem;
  margin: 0 auto;

}


.about-row-1 {
  display: block;
  margin: 2.5rem auto 0;
  text-align: center;
}

.about-row-1 h2 {
  display: flex;
  justify-content: center;
}

.about-row-1 .desc-jp {
  margin: -0.7rem 0 0.3rem;
}

.about-row-1 p,
.about-row-2 p {
  margin-top: 0.8rem;
  font-size: 0.8rem;
  line-height: 1.2rem;
}

.about-row-2 h2 {
  display: flex;
  justify-content: center;
}

.about-block-1 p,
.about-block-2 p,
.about-block-3 p,
.about-block-4 p {
  /*  position: static; */

  margin: 0.62rem auto 2.2rem;
  font-size: 0.79rem;
  text-align: left;
}

.about-block-1-left,
.about-block-2-left {
  width: 17.5rem;
  text-align: left;
}

.about-block-3-left {
  width: 17.5rem;
}

.about-block-4 {
  /*  padding: 0 2.5rem; */

  margin: 0 auto;
  width: 100%;
}

.about-block-4-desc {

  margin: 0 auto;

  /*  text-align: center; */
  /*  width: 100%; */

  width: 18.37rem;

  padding: 0;
}

.about-block-center-child {
  display: inline-block;
  text-align: left;
  line-height: 1.5em;
  color: #333333;

  /*  margin-top: 0.62rem; */

  margin: 0.62rem auto 0 auto;

  width: 18.37rem;


}

.about-block-center-child li {
  padding-left: 0.5em;

}

.about-block-4 p {
  margin: 0.8rem auto 0.7rem;
}

.hr-1 {
  width: 17.5rem;
  margin: 0 auto;
  background-color: #333333;
}

.hr-2 {
  width: 17.5rem;
  margin: 0 auto;
  background-color: #333333;
}

.hr-3 {
  width: 17.5rem;
  margin: 0 auto;
  background-color: #333333;
}

.hr-4 {
  margin: 0 auto;
  width: 17.5rem;
  background-color: #333333;
}

.about-block-2 {
  margin: 0 auto;
  width: 100%;
}

/* .about-block-3 {
  margin: 0 auto;
  width: 70vw;
} */

.pc-enabled-about {
  display: none;
}

.center {
  margin: 0 auto;
  text-align: center;
}

.center-child {
  display: inline-block;
  text-align: left;
}

.desc-jp-about-wrapper {
	margin: 0 auto;
}

.about-row-2 {
  /*  display: flex;
  justify-content: center; */
  /*  top: 65rem; */

  /*  display: block;
  margin: 2rem auto;
  text-align: center; */

  display: block;
  /*  margin: 2.5rem auto 0; */
  margin: 0 auto;
  text-align: center;

}

.about-row-2 .desc-jp {
  margin: -0.9rem 0 0.5rem;
}


.about-block-4-desc li {
  font-size: 0.8rem;
  line-height: 1.5em;
}

.about-block-4-desc li:not(:first-child) {
  margin-top: 1em;
}

@media (min-width:600px) {

  /* 600px以上の時（HPサイズの時） */
  .desc-about {
    width: ;
  }

  .main-about {
    width: 100%;
  }

  .desc-center {
    line-height: 1.5em;
  }

  .desc-center li {
    font-size: 0.83vw;
  }

  h3 {
    font-size: 2.6vw;
    line-height: 1.5em;
    text-align: center;
    color: #333333;
  }

  .main-about h3 {
    margin: 0.4rem auto 0 auto;
  }

  .desc-jp {
    font-size: 0.83vw;
    line-height: 1.6em;
  }

  .about-top {
    width: 37.34vw;
    margin: 0 auto;
    font-size: 0.83vw;
    line-height: 1.6em;
  }

  .desc-left li {
    font-size: 0.83vw;
    margin-top: -1.2em;
    padding-left: 0;
  }

  .about-row-wrap {
    display: flex;
    flex-wrap: wrap;
  }

  .about-row-1 {
    width: 80vw;
    display: flex;
    justify-content: space-evenly;
    margin-top: 2.8rem;
    gap: 0 5.2vw;
  }

  .about-row-1 p,
  .about-row-2 p {
    font-size: 0.8rem;
    line-height: 1.4rem;
  }

  .about-block-1 {
    width: 26.04vw;
  }

  .about-block-1 .about-block-1-left {
    width: 23.14vw;
  }

  .about-block-2 {
    width: 26.04vw;
  }

  .about-block-2-space {
    margin-right: 2.6vw;
  }

  .about-block-3 {
    width: 26.04vw;
  }

  .about-block-3-left {
    width: 26.04vw;
  }

  .pc-enabled-about {
    display: inline-block;
    font-size: 0.83vw;
  }

  .about-row-2 {
    margin: 0 auto;
  }

  .hr-1,
  .hr-2,
  .hr-3,
  .hr-4 {
    width: 100%;
    background-color: #333333;
  }

  .about-title {
    width: 26.04vw;
  }

  .about-title h2 {
    font-size: 1.3vw;
    letter-spacing: 0.15rem;
    line-height: 0.8rem;
  }

  .about-title .desc-jp {
    margin: -0.55rem 0 0.4rem;
    font-size: 0.83vw;
    line-height: 1.4vw;
  }

  .about-block-empty {
    width: 26.04vw;
  }

  .about-block-4 {
    margin: 0 auto;
    padding: 0;
    width: 26.04vw;
  }

  .about-block-4-desc {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    width: 20vw;
    margin: 1.2rem 0 0 0;
    text-align: left;
  }

  .about-block-center-child {
    margin: 0;
  }

  .about-block-center-child li {
    font-size: 0.83vw;
    width: 26.04vw;


    margin-bottom: 0.62rem;
  }

  .about-block-4-desc li:not(:first-child) {
    margin-top: 0;
    /* SP 版のために入れてある 1em をキャンセル */
  }

  .about-block-1 p,
  .about-block-2 p,
  .about-block-3 p,
  .about-block-4 p {
    margin: 0.93rem auto 2.5rem;
    font-size: 0.83vw;
  }
}

/* job.html */

.main-block-job .job-title {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0.62rem 0;
  padding: 0.3rem 0 0.3rem 0;

  font-size: 1rem;
  font-weight: bold;
  border: 1px solid #333333;
  color: #333333;
}

.main-block-job .job-title span {
  padding-left: 1rem;
  font-size: 0.6rem;
}

.main-block-job {
  display: block;
  text-align: center;
  font-size: 0.8rem;
  font-weight: normal;
  border: none;
}

.main-block-job .job-desc {
  margin: -0.2rem auto 1.5rem;
  display: block;
  text-align: left;
  font-size: 0.8rem;
  font-weight: normal;
  color: #333333;
  border: none;
}

.bold {
  font-size: 0.8rem;
}

@media (min-width:600px) {
  /* 600px以上の時（HPサイズの時） */

  .main-job {
    width: 74.8vw;
    display: flex;
    flex-wrap: wrap;
    column-gap: 7.8vw;
  }

  .main-block-job {
    width: 33.5vw;
  }

  .main-block-job img {
    width: 100%;
  }

  .main-block-job .job-title {
    margin: 0.52vw 0 0 0;
    padding: 0.52vw 0 0.25vw 0;
  }

  .main-block-job p {
    padding: 0 0 0.25vw;
    font-size: 1.03vw;
  }

  .main-block-job .job-title span {
    padding-left: 1.2vw;
    font-size: 0.8em;
  }


  .job-desc-wrapper {
    margin: 0 auto;
  }

  .main-block-job .job-desc {
    display: block;
    text-align: center;
    margin-top: 0.8em;
    font-size: 0.83vw;
    font-weight: normal;
    line-height: 1.6em;
    border: none;
  }

  .bold {
    font-size: 0.83vw;
  }

  .pc-enabled.left-space-font {
    font-size: 1vw;
    padding-left: 0;
  }

}


/* usage.html */

.usage-main {
  display: block;
  flex-wrap: nowrap;
  padding: 0 2.5rem;
  margin: 0 auto 2rem;
}

.usage-main-block {
  width: 100%;
  margin-bottom: 1rem;
  color: #333333;
}

.usage-main-block p {
  line-height: 1.7rem;
}

/*
.br-height {
  display: initial;
  content: "";
  height: 2rem;
}
*/

.usage-margin-top {

  margin-top: 1rem;

}


.usage-title {
  display: flex;
  align-items: center;
  margin-bottom: 0.4rem;
  padding: 0.6rem 0.3rem;
  font-size: 1.5rem;
  border: solid 1px #333333;
}

.numbers-circle {
  display: inline-block;
  width: 1rem;
  height: 1rem;
  border-radius: 50%;
  background: #616980;
  text-align: center;
  line-height: 1rem;
  color: #ffffff;
  font-size: 0.68rem;
}

.usage-title span {
  font-size: 0.87rem;
}

.usage-title span::before {
  content: "";
  margin-left: 1.6rem;
}

@media (min-width:600px) {
  /* 600px以上の時（HPサイズの時） */

  .usage-main {
    display: flex;
    flex-wrap: wrap;
    gap: 5vw;
    width: 90vw;
    margin: 1rem auto 2rem;
  }

  .usage-main-block {
    width: 40.4vw;
    margin-bottom: -1rem;
  }

  .usage-main-block p {
    font-size: 0.83vw;
    line-height: 1.41vw;
  }

  .usage-title {
    padding: 0.5vw 0.25vw;
  }

  .usage-title span {
    font-size: 1.3vw;
  }

  .usage-title span::before {
    content: "";
    margin-left: 1.56vw;
  }

  .numbers-circle {
    display: inline-block;
    width: 2vw;
    height: 2vw;
    font-size: 1.3vw;
    border-radius: 50%;
    background: #616980;
    text-align: center;
    line-height: 2vw;
    color: #ffffff;

    margin-left: 0.5vw;
  }

  .usage-margin-top {

    margin-top: 0.83vw;

  }

}

/* access_contact.html */

.access-top {
  padding: 0 1.87rem;
}

.name-sm {
  margin-top: 1.25rem;
  font-size: 0.75rem;
  text-align: center;
  color: #333333;
}

.name-lg {
  margin-bottom: 0.93rem;
  font-size: 1.37rem;
  text-align: center;
  color: #333333;
}

.address {
  display: block;
  margin: 0 auto;
  text-align: center;
}

.address p {
  display: inline-block;
  text-align: left;
  color: #333333;
  font-size: 0.87rem;
}

.tel {
  display: flex;
  justify-content: center;
  align-items: center;
  left: 0;
  right: 0;
  margin: 0.81rem auto 0 auto;
  color: #333333;
}

.tel-mark {
  margin-right: 0.2rem;
  padding: 0.2rem 0.9rem;
  font-size: 0.75rem;
  border: 0.5px solid #333333;
}

.tel-number {
  font-size: 2.18rem;
  text-decoration: none;
  color: #333333;
}

.hour {
  margin-bottom: 1.18rem;
  font-size: 0.75rem;
  text-align: center;
  color: #333333;
}

.map {
  padding: 0 1.87rem;
}

iframe {
  display: block;
  margin: 0 auto;
  width: 100%;
  height: auto;
  aspect-ratio: 4 / 3;

}

.desc-space-access {
  margin-top: 3.56rem;
}

.access_contact-desc {

  width: 10.38rem;
  margin: 0 auto 1.25rem auto;
  text-align: center;
  border-top: 1px solid #333333;
  border-bottom: 1px solid #333333;
  color: #333333;

}

table {
  width: 87%;
  margin: 0 auto;
  border-spacing: 0;
  border-collapse: collapse;
}

th,
td {
  padding: 1.5rem;
  gap: 0;
  text-align: center;
  border: 1px solid #333333;
  font-size: 0.87rem;
  font-weight: normal;
}

.not-tel {
  pointer-events: none;
  text-decoration: none;
}

.contact-mail p {
  font-size: 0.75rem;
}

@media (min-width:600px) {
  /* 600px以上の時（HPサイズの時） */

  .name-sm {
    margin-top: 2.5em;
    font-size: 0.83vw;
  }

  .name-lg {
    font-size: 2.6vw;
  }

  .address {

    margin-top: 2em;

  }

  .address p {
    /*    margin-top: 1.5em; */
    font-size: 1.15vw;
  }

  .tel {

    margin-top: 1.25em;

  }

  .tel-mark {
    font-size: 0.83vw;
    padding: 0.3em 0.6em 0.06em;
    color: #333333;
  }

  .tel-number {
    font-size: 2.6vw;
    color: #333333;
    pointer-events: none;
  }

  .hour {
    margin-bottom: 1.87em;
    font-size: 0.83vw;
    line-height: 1.6em;
    color: #333333;
  }

  .map {
    margin: 0 auto;
    padding: 0;
  }

  iframe {
    display: block;
    margin: 0 auto;
    width: 31.25vw;
    aspect-ratio: 4 / 3;
    height: auto;
  }

  .desc-space-access {
    margin-top: 5.63em;
  }

  .access_contact-desc {

    width: 16vw;
    margin: 0 auto 1.25em auto;

  }

  table {
    /*    margin: -1.2em auto 0 auto; */

    margin: 0 auto;

    width: 31.25vw;
    height: 0.325em;
  }

  th,
  td {
    font-size: 1.15vw;
    padding: 1em;
  }

  th {
    width: 10.3vw;
  }

  td {
    width: 19.8vw;
  }

}

/* mail */
.contact-container {
  margin: 0 auto;
  padding: 3.125em 1.88em 0;
}

.form-group {

  margin-top: 0.94rem;
  text-align: left;

}

.input-push {
  margin-top: 1rem;
  margin-bottom: 1.38rem;

}

.contact-tel {
  text-align: center;
  margin-bottom: 30px;
}

.contact-tel h2 {
  font-size: 0.88rem;
  letter-spacing: initial;
}

.contact-tel h2 span {
  background-color: #ffffff;
}


.contact-mail {
  text-align: center;
  margin-bottom: 0.31em;
}

.contact-mail h2 {
  letter-spacing: initial;
  font-size: 0.88rem;
}

.contact-mail h2 span {
  background-color: #ffffff;
}

.onecolumn {

  grid-column: span 2;

}

.contact-form input,
.contact-form select,
.contact-form textarea {
  width: 100%;
  padding: 10px;
  font-size: 0.75rem;
  border: 1px solid #ccc;
  border-radius: 3px;
}

.contact-form textarea {
  resize: none;
}

.contact-form {
  grid-column: span 2;
}

.form-submit {
  grid-column: span 2;
  text-align: center;
  margin-top: 1.88rem;
  margin-bottom: 1.25rem;
}

.contact-form input[type="submit"] {
  background-color: #333333;
  color: #ffffff;
  padding: 10px 20px;
  font-size: 1rem;
  border: none;
  border-radius: 3px;
  cursor: pointer;
}

.contact-form input[type="submit"]:hover {
  background-color: #555;
}

label {

  font-size: 0.88rem;

}

label span {

  font-size: 0.75rem;

}


/* 600px以上の時（HPサイズの時） */
@media screen and (min-width: 600px) {
  
  .contact-container {
      margin: 6.25em 4.5em 9.38em;
  }

  .contact-form {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.56em 2.86vw;
  }



  .contact-tel {
    margin: 0 auto 0.63em auto;
  }


  .hour {

    margin-bottom: 2.5em;

  }

  .contact-tel h2,
  .contact-mail h2 {
    margin: 0 auto;
    white-space: nowrap;

  }

  .contact-tel h2 span,
  .contact-mail h2 span {
    padding: 0 2.08vw;
    font-size: 1.3vw;
  }

  .contact-tel h2::before,
  .contact-tel h2::after {
    content: "";
    width: 18.23vw;
    height: 1px;
    background: #333333;
  }

  .contact-mail {
    text-align: center;
    margin-bottom: 0.31em;
  }

  .contact-mail h2::before,
  .contact-mail h2::after {
    content: "";
    width: 18.23vw;
    height: 1px;
    background: #333333;
  }

  .contact-form {
    grid-template-columns: repeat(2, 1fr);
  }

  .contact-form textarea {
    grid-column: span 2;
  }

  .contact-form .form-submit {
      grid-column: span 2;
      width: 28.65vw;
      margin: 3.13em auto 0 auto;
  }

  .contact-form button {
    grid-column: span 2;
  }

  .contact-container h4 {

    font-size: 1.3vw;

  }

  .input-push {

    text-align: center;

    margin-top: 1.25em;
    margin-bottom: 1.56em;

  }

  label {

    font-size: 0.94vw;

  }

  label span {

    font-size: 0.63vw;

  }

  .contact-form input,
  .contact-form select,
  .contact-form textarea {

    font-size: 0.83vw;

  }

}

/* thanks */
.thanks-main {
  display: block;
}

.thanks-message {
  margin: 6rem auto 0 auto;
  text-align: center;
  font-size: 1.25rem;
  line-height: 1.5rem;
}

.thanks-main div {
  text-align: center;
}


.thanks-second-message {
  margin: 1.25rem auto 0 auto;
  font-size: 0.7rem;
  line-height: 1.5em;
}

.top-button-wrap {
  padding: 0 1.875rem;
}

.top-button {
  width: 100%;
  height: 4.38rem;
  margin: 3.13rem auto 7.5rem;
  box-shadow: 0px 2px 10px #ddd;
  border-radius: 50px 50px;
  text-align: center;
}

.top-button a {
  text-decoration: none;
}

.top-button p {
  font-size: 1rem;
  padding-top: 1.5rem;
  color: #333333;
}

@media (min-width:600px) {
  /* 600px以上の時（HPサイズの時） */

  .thanks-message {
    margin: 2.6em auto 0 auto;
    font-size: 2.6vw;
    line-height: 1.3em;
  }

  .thanks-second-message {

    margin: 2.5em auto 0 auto;
    font-size: 0.9vw;
    line-height: 1.8em;

  }


  .top-button {
    width: 39.06vw;
    height: 10.63em;
    margin: 8.13em auto 8.13em auto;
    box-shadow: 0px 2px 10px #ddd;
    border-radius: 5em 5em;
    text-align: center;

    letter-spacing: 0.1em;

  }

  .top-button a {
    text-decoration: none;
  }

  .top-button p {
    font-size: 1.93vw;
    padding-top: 1.56em;
    color: #333333;

    letter-spacing: 0.1em;

  }




}




※wp サポートフォーラム
　https://ja.wordpress.org/support/


192.168.0.201:9696


再度まとめます。

グランクルールWebSite構築場所
http://192.168.0.201:9696

ダッシュボード
http://192.168.0.201:9696/wp-admin/







11:13 2025/01/23







？特定のIPアドレスを拒否
Forbidden、つまり「そのアクセスは禁止されている」と返されているので、少なくとも間違ってはいません。
ふたつ指定していますがどちらが効いたかはわかりますか？


▽
・ブラウザによってアクセス制限をかけたり
サーバにアクセスしたときに「自分はこういうブラウザを使っています」という情報を送っています。ブラウザ名だけではなくバージョン等の情報も含まれていることが多いので、単に "Chrome" としただけではすり抜けてしまうでしょう。
自分のブラウザがどのように名乗っているかは、たとえば
https://testpage.jp/tool/ip_user_agent.php
↑このページの HTTP_USER_AGENT で確認できますし、先日送った JavaScript でも確認できます。これをコピペして再度試してみて。
この名乗りを変更させる手段もあって、「UserAgent偽装」とも呼ばれます。
やり方の一例はこのあたりに↓
https://zenn.dev/rabee/articles/change-user-agent-devtools
▽
このあたりも試してみて～のいろいろ
・ブラウザによって見せるページを変える
　RewriteCond 機能で HTTP_USER_AGENT をチェック、合致したらリダイレクトで飛ばしてしまう・・・といった手段で実現できます
・特定のディレクトリだけ制限かけるとか
　これは .htaccess ファイルをどこに置くか、で挙動が変わってきます
　置き場所間違えると必要な場所にパスワード制限がかからなかったり、その逆に必要のないところに制限がかかったりするので注意よー？　と。
・特定の拡張子ファイルにだけ制限かける
　朝に送った、.pdf ファイルに対するアクセスだったらリダイレクトする・・・のあたりを参照
・ショートカット的な使い方
　これは説明が足りなかったかもしれない
　本来
　http://example.com/sugge-nagai-url-de-uchikomunoga-mendou/hoge.html
　でアクセスしなきゃならないファイルがあるとして、面倒なので
　http://example.com/su/hoge.html
　にアクセスしたら前者にリダイレクトしちゃえ☆的なこともできるよ、と。


●Regex（正規表現）の基本的な文法

▽
未
（あくまで例えであり、実際にこのような作業が必要であるかは分からない）
この場合、スペースは 4 つだけなので手作業で変更してもさほど苦労はしないだろう。
しかし、これが 1 行ではなく、10000 行続いていたらどうだろう？
そんなものを手作業でやってたら日が暮れてしまいそうだ。
そんな時に便利なのが Regex（正規表現）である。
正規表現を使えばコマンド一つで、死ぬほど面倒くさい作業も一発である。

▽
正規表現とは何か？
正規表現とはテキストから検索したい「文字列の表現方法」である。
単なる文字列だけでなく、「aから始まる単語」や「数字のみの行」などの細かい条件の指定が可能である。
よく Linux の grepコマンドと合わせて利用される。
→なんとなく思い出しました。

▽
正規表現の書き方
「apple」のように単語や文字そのものを検索パターンとすることをリテラルと言う。
これだと普通の検索と同じである。
正規表現ではメタ文字という特殊な記号を使うことで、もっと複雑な検索パターンを作ることができる。

メタ文字
.（ドット）
改行を除く任意の一文字にマッチさせることができる。
例 1 ：a.pとすると「app」や「arp」などがマッチする。
例 2 ：a..leとすると「apple」がマッチする。
→なんとなく

.自身を検索したいときは.の前に\を付けてエスケープしなければならない。

文字種の限定
下記の記号を使うと、数字や文字など文字種を指定できる。
？

記号	機能
\d	0-9 の数字 1 文字を指す
\D	\d 以外の 1 文字を指す
\w	a-z、A-Z、0-9、_ の内の 1 文字を指す
\W	\w 以外の 1 文字を指す
\s	スペース、タブ、改行などを指す
\S	\s 以外の 1 文字を指す








13:22 2025/01/17
htaccess



10:46 2025/01/21
▽
アクセスをブロックする機能
・全てのアクセスを拒否
　→成功
　→You don't have permission to access this resource.

・特定のIPアドレスを拒否
　.htaccess の記述
　<RequireAll>
    Require all granted
    Require not ip 220.97.131.170
    Require not ip 192.168.0.0/16
　</RequireAll>
　
　　自分のipを調べ、下記エラーコードが出たのですが合っていますか？
　　　Forbidden
	You don't have permission to access this resource.
	Apache/2.4.58 (Ubuntu) Server at 192.168.0.201 Port 80

・ブラウザによってアクセス制限をかけたり、
　.htaccess
　　　SetEnvIfNoCase User-Agent "Chrome" block_browser
　　　Deny from env=block_browser

  →chromeでアクセスした結果
　　普通にページが表示されてしまいました。

・特定のブラウザ以外をブロック
　.htaccess
	SetEnvIfNoCase User-Agent "Chrome" allow_browser
	Order deny,allow
	Deny from all
	Allow from env=allow_browser
　→失敗

？小林さんの説明がよく理解できなかった部分
　・偽装
　・あえて自分の環境をブロックする。

11:44 2025/01/21
▽
未着手
・ブラウザによって見せるページを変えたり
　このあたりもなんとなーく調べて　試してみて下さい。
・他にも特定のディレクトリだけ制限かけるとか
・特定の拡張子ファイルにだけ制限かける

・ショートカット的な使い方








送信先メールアドレス：grandcouleur@gmail.com
トップページの URL　：https://grandcouleur.llc/

☆長内さんの補佐でライティングのリーダー
・18日～？


★ヨガ
●手の痺れが起こる主な原因

1. 姿勢や体勢の問題
ヨガのポーズ中に体のどこかを不自然に圧迫していると、血流や神経が一時的に制限され、手が痺れることがあります。

例:
手首や肘を強く曲げるポーズ（例: ダウンドッグ）で、神経が圧迫される。
座位で腕や肩に余分な負荷がかかっている。

対処法:
・無理をせず、自分の体が快適に感じる範囲でポーズを調整する。
・インストラクターにポーズの正しいやり方を確認する。

2. 筋肉の緊張や柔軟性の不足
ヨガを始めたばかりだと、筋肉が硬く、特定の動きやポーズに慣れていないため、筋肉が過剰に緊張して神経を圧迫することがあります。

対処法:
・ゆっくりと体を慣らし、ウォーミングアップを丁寧に行う。
・柔軟性を高めるために軽いストレッチを日常的に取り入れる。

★痺れを防ぐための一般的なアドバイス
１．ウォームアップを徹底する
・ヨガを始める前に全身を温めることで、筋肉や関節をほぐし、神経の圧迫を防ぎます。

２. 無理をしない
・体が慣れていない動きを急に強制しない。初めてのポーズでは、補助具（ブロック、ストラップなど）を使うのがおすすめです。

３. 適切な呼吸を保つ
・呼吸が浅くなると筋肉が緊張しやすくなるため、ゆっくり深く呼吸することを心がけます。
４. インストラクターに相談する
・痺れや不快感がある場合は、インストラクターに伝えて適切な調整や代替ポーズを教えてもらいましょう。

まとめ
手の痺れは、初心者がヨガを始めたばかりの頃には一時的に起こることがありますが、適切な体勢や対処を行うことで防ぐことが可能です。もし痺れが長引いたり、頻繁に起こる場合は、既存の健康問題や姿勢に問題がある可能性があるため、専門家（医師や理学療法士）に相談することをおすすめします。



★ネットワーク

というところで年明け 1/6 ですが、私居りません。
何をしていれば良いかというと、
ftpソフトの使い方を覚えて
.htaccessでいろいろできるようになって
自分で作った php プログラムをアルティスサーバ上で動くようにセットアップして
というメニューをご用意しております:meow_bread:

▽
ftpソフトがどういうものかは・・・わかるよね？
あたしは WinSCP っての使ってるけど、何使ってもらっても構わない。192.168.0.201 相手に接続を試みて欲しい。転送プロトコルとかそういうのが選べるなら sftp とか、ポート 22 番使用とか、そういうのが通るハズです。
ID / Password は kyosuke / password です。
192.168.0.201 は手元にあるサーバだから Windows エクスプローラから放り込むことができるけど、一般的にはこの ftp ソフトを使用してサーバにファイルを転送します。
んで、身内用だし何だしというわけでガバガバセキュリティでサーバが丸見えになります。
/var/www/html 下にファイルを置くと、http://192.168.0.201/ で表示できるようになります。いろいろ放り込んで遊んでみて。後の .htaccess もこのディレクトリに放り込んで挙動を確認してみて下さい。
本番環境にファイルを放り込む時はこんな感じだよ・・・ということで。

▽
.htaccess はWebSiteにこういうファイルを置くといろいろできますよという。よく使われるところでは
・パスワードを掛けたり、
kyosuke:password

・特定のURLにアクセスがあった時に別のURLに転送してしまう(Redirect)など。

他にもいろいろあるけど、このあたりは体験してみて欲しい:meow_thumbsup:

▽
192.168.0.201 サーバで php は動くようになっていますが、ただファイルを置いてアクセスしただけでは動きません。動かそうとしてどうなるかは試してみて下さい。php のサンプルプログラムは ChatGPT に考えてもらうなり、どこかから拾ってくるなりお好きに。
ではどうすれば動くようになるのか？ 「php 動かない」等では見当外れなアドバイスしか出てきませんが・・・「cgi 動かない パーミッション」なら出てくるかな。
Linux 扱った時の ls コマンドとか chmod コマンドって覚えてるだろうか。要は単にファイルを置いただけでは「実行権限」が付与されていないために php プログラムが動かないんだ。それを動くようにしなければならない。一般的には ftp ソフト上から行うことになるので、ftp ソフトをちょろっと触ってみて、このあたりがいじれるようになってほしい。
・・・というのをやってもらおうと思ったんだけど、php はいろいろあって実行権限無くても動くらしいということを今知った:meow_sad-rain:
近年はあまり使われないけど Perl、マイナーかつマニアックだけどあたしは好きな Ruby、人気らしいが読み方もわからない Python、このあたりのプログラムを動かす時は実行パーミッションが必要なんです:meow_sad-rain:
んで、当然ながら ftp ソフトではなく、ssh でサーバに接続してパーミッション変更しても動くんだけど、一般的には ssh 使えないことが多いので ftp ソフトからなんとなーくパーミッションいじる方法を知っておいてください。
▽
という３つのお題だけど、初めて触るのだとこれだけで２日くらい消えると思う。

★
▽
・htaccess の機能 IP アドレス／ブラウザによってアクセス制限をかけたり
・見せるページを変えたりといったこともできます　？リダイレクト？

▽
・http://192.168.0.201/Otani/hogehoge/
にアクセスしたときに、index.html ほかが存在しないときはディレクトリ内のファイル一覧を表示するのが基本的な動きなんですが、これを見せないようにするとか。セキュリティ的な意味で使われることが多いです。
「htaccess ファイル一覧」等で google るといろいろ出てきます。




★☆
●SP 
・Show more 余白
・Contactボタン　余白
・footer 下に引っ張るとバックグラウンドの色が出る


★
Gather、こちらになります。ブラウザから入れますので、入ってみて色々試してみてください。
普段は職員が常駐しているものになります！
https://app.gather.town/invite?token=Vu5Qo7_DQP6Cjv90C9ci



★
・メールフォームのカスタマイズ
下記URLからご確認ください
http://192.168.0.201/GrandCouleur/access_contact.html


メールフォームから送ると、宛先メールアドレスの設定にかかわらず http://192.168.0.201:1080/ で表示されるメールボックスに届きます。

☆
スーパーリロード
Ctrl + Shift + R

★
実は 192.168.201 にサーバが建ってまして、ブラウザから http://192.168.0.201/phpinfo.php するとテストページが表示されるはずです。
Windows エクスプローラからは \\192.168.0.201\www でアクセスできるハズです。パスワード等を求められたら
ID   : kyosuke
Pass : password
で通るハズです。ここにファイルを置くと http://192.168.0.201/ファイル名 で表示できます。私が自分で試験したときは php も動いたのできちんと動くはず・・・
あるいはローカルに鯖建てしてもらっても構いませんし。
メール送信はできるかと思いますが、迷惑メール扱いされてしまう可能性が高そうですね。これは php プログラムの改造が必要そうです。ちょいっと調べて、やってみますね。
いやー、複雑なデザインではなさそうかなー？ と思わせておいて手こずる Site ですねー。でもまぁ「身内案件」ですし、心身壊さない程度にやっていきましょう:meow_coffee:


★grandcouleur

★
トップページの URL　：https://grandcouleur.llc/


1920px * 0.83vw = 15.936px = 1em
5.63em = 89.71968px
15.936px / 1920px * 100 = 0.83vw

メールフォームに関して。
本番環境は「エックスサーバ」のレンタルサーバを利用 https://www.xserver.ne.jp/
自動返信メールは無くて良し。
実装が手間なら Google フォームでも可。




・headerの高さ　済み
・footer nav　12→14px　済み

・hero 高さ　文字が２行見えるように　タイトル　済み

job レタースペース　１．１文字サイズ　行間　宮崎さん

usage 〇　のところの□の高さ 25%アップ　色#333333　〇の色   宮崎さん

・about 1行目　グリッドへ

SP版　左右余白のvwはそのまま　済み

12月11日より、年次有給休暇が10日間の使用が可能になります。。有給の申請について
 ・使用希望がある場合、前日の就労終了時間（15：00）までに有給休暇申請書にその旨を記載し、職員までお声がけ下さい。
 ※申請書はお声がけいただいた際にお渡しします。
 ・突発的な休暇や体調不良などで当日のお休みで有給休暇を使用したい場合は、ご本人からの希望のもと、対応可能です。ご相談ください。※注意
 ・年休は、付与されたまま使わないと2年で消滅してしまいます。
 ・付与日から1年以内に、5日以上の年休を使用してください。
 ・残数確認などは適宜お答えできますのでお声がけください。
 ・一度使用した有給休暇に関しては、後日欠勤への変更等は調整できかねます。
 ・有給申請をしたが、使用日前の変更は可能です。不明点があれば、野崎までご連絡ください。
※半休なし


昼食アンケート

https://docs.google.com/forms/d/e/1FAIpQLSd97i1EU7CV8eFDT4XgvfHWxXQxlM5kak2G9lfubrjncZpAWw/viewform?usp=sf_link


（7月第4週）の当番予定表
https://docs.google.com/spreadsheets/d/1c7XZjmoWlQ68zMJp1N2AwehfTiyrB6rA6YmBzZu8Unk/edit?gid=1683933237#gid=1683933237


C:\Users\artis\Local Sites


経験的に米８合あたり水７合程度がちょうど良いようです。適宜増減して下さい。おおよその目安を炊飯器正面壁に貼ったマニュアルに黄色い付箋で付してあります。
　大体の目安：
　　米６合　→　水５合＋1/4合くらい
　　米７合　→　水６合にちょっとだけ足す
　　米８合　→　水７合
　　米９合　→　水８合よりちょっとだけ少なく
　　米10合　→　水８合＋3/4合くらい

★米とぎ、片付け　盛り付けもやる

片付け　米ラップもやる

TP-LINK
52369513

chatGPT
Kyo3969&0193chA


日揮触媒化成
管理画面ログインURL
https://jgccc-8wtk.movabletype.biz/mt/admin
artis.kyosuke0530@gmail.com
artis.kyosuke0530
ユーザー名：nikki
パスワード：20240719

★google
artis.kyosuke0530@gmail.com
Kyo3969&0193arT

サブ
GoogleアカウントのID
qsuke1983
姓
Otani
名
Kyosuke
パス
Q39690193G
予備のメアド
artis.kyosuke0530@gmail.com


asana
Kyo3969&0193asA

Local
wplesson01
wplesson01.local

artis-otani0530
kyo39690193loc
artis.kyosuke0530@gmail.com



wcbnaturallife
ログインURL
http://wcb-natural-life.local/test-3969-login/


-----------------------------------------------------------------
GitHub
artis.kyosuke0530@gmail.com
Kyo3969&0193giT
kyosuke0530


git clone や git checkout といったコマンドは Linux 上で打ちます。
そーするとカレントディレクトリ下にいろいろダウンロードしてきます。
特に指定しなければ origin/main というタグの付いたバージョンを引っ張ってきます。
特定のバージョンを指定したければ、通常は
https://qiita.com/Ryo-0131/items/997fef146efd717c3c11
この手法で「ブランチ」や「タグ」を指定。

例
git clone -b release-0.18 https://github.com/VOICEVOX/voicevox/


実験版をいじりたいといった時に使いますが、あまり出番はないかもです。
最新でもなければタグも付いていないような過去の特定のバージョンを見たいという場合に
https://qiita.com/samurai_runner/items/7812749493554208aeae
こっちの手法を使うことになります。
しかし使う機会はありません。「あまりない」ではなく「ない」です。
して、指定のための「ブランチ」だ「タグ」だ SHA がなんとかだというのはどこで確認するのかというと、Windows 上で動かした Fork で確認すると便利だよと。
ついでに Fork で何がどう、いつ、誰が書換えたのか履歴を追ってわかるよと。
そういうツールでした。
自分が書換えたファイルをアップロードするのにも Fork は便利なのですが、そのへんはいずれ時期が来たらで。
今のところは「なんかよくわからんけど共有サイトがあって、こういうツールで履歴を管理するんだな」ということだけわかってもらえれば。



-----------------------------------------------------------------
ドットインストール

・256times - 書いて、読んで、ともに学ぶ、参加型プログラミング勉強会
https://256times.com/

・詳解JavaScript DOM編
https://dotinstall.com/lessons/basic_javascript_dom_v2/52901

-----------------------------------------------------------------
Linux

ubuntu
UNIX
sudo
kyo0530
kyo39690193ubu

 サーバーのIPアドレスが分からない場合は、インターネット上の別の場所から見たパブリックIPアドレスが得られる、icanhazip.comツールを使用すれば分かります。

curl -4 icanhazip.com

106.155.6.229

自分のIPアドレスを確認する
$ ifconfig

----------------------------------------------------
ルータ設定を触ってみる

ルータの各種設定項目と説明

★☆
http://web.setup/
http://192.168.10.1/
にアクセスすると管理画面が開きます。そこからいろいろ設定です

貸出時の設定値は以下の通り
　IP アドレス：192.168.10.1 admin / password
　無線LAN：WARPSTAR-A9056C / 0118509679（アルティスの電話番号）

▽
もしも設定ミスって繋がらなくなった場合は容赦なく設定初期化して構わない。

初期化直後の設定値は以下の通り
　IP アドレス：192.168.0.1 パスワードなし
　無線LAN：WARPSTAR-A9056C 暗号化なし

もしこれで無線 LAN が繋がらないー！という場合はルータを外して自席に持ち込み、有線で接続する必要があります。必要があれば手順を説明するのでお知らせくださいな。

管理者パスワードの初期設定
admin
0118509679

▽
現状で
外部のネット
|
?.?.?.?(WAN)
アルティスのルータ1
192.168.1.1(LAN)
|
192.168.1.?(WAN)
アルティスのルータ2
192.168.0.1(LAN)
|
+------------------- 他のアルティス利用者 192.168.0.?
|
192.168.0.?(WAN)
今回貸し出したルータ
192.168.10.1(LAN)
|
WARPSTAR-A9056Cに接続した端末

という接続になっています。


ルータの「LAN側IPアドレスを172.31.10.10に設定」すると、ルータは「うちは172.31.10.10だよ」という看板を掲げ始めます。もちろん管理画面を呼び出すためのアクセス先も172.31.10.10を指定しないと、誰も応答してくれません。
その際に気をつけなければならないのがルータの「DHCPエントリ設定」の項目。
ルータが172.31.10.10なのに、ここが192.168.10.xとかだったりすると自分の端末IPアドレスが192.168.10.xになってしまい、「ネットワーク違い」と認識されてこれまた誰も応答しない。このときは「Windows11 ip 手動設定」でGoogleって出てくる手順に従って、自端末のIPアドレスを手動で設定し172.31.10.10と同じネットワークにつながるようにしてやらなければなりません。
具体的にルータを172.31.10.10として、DHCPを192.168.10.xのままにしてしまったという場合。
自端末の IP アドレスを172.16.0.1-172.31.255.254のいずれかに設定
サブネットマスクは255.255.0.0（172.x.x.xは「クラスB」アドレスであることに注意。192.168.x.xなら「クラスC」だから255.255.255.0になる。対して10.x.x.xだったら・・・？）


10.0.0.10


ゲートウエイはルータのアドレス172.31.10.10
DNS 設定はルータの設定いじるだけなら不要だが、設定するならルータと同じアドレス172.31.10.10
これで再度管理画面につながるはずです。DHCPを172.31.10.xあたりに変更して、自動で同じネットワークにつながるように設定し直してやりましょう。
といった感じです。
▽
で、
なんかおかしくなったので初期化した。
この場合はルータのアドレスは192.168.0.1になります。少なくとも今回使っていルータの場合は。
わからなくなったときは「Windows11 ip 確認」で Google って出てくるネットワークの設定確認画面を開いてみましょう。IPv4 デフォルトゲートウェイ／DNSサーバ／DHCPサーバ、そんな感じの名前で出てくるアドレスが現在のルータのアドレスです。



★基本設定

動作モード
WANポートの先に「ONU/光回線終端装置」や「VDSLモデム」が直接繋がっている場合は「このルータでネット利用者の認証を行わなければならない」ので、「PPPoEモード」にする。
WANポートの先に別のLANがあるとか、また別のルータを介して外に繋がっているとかの場合は「ローカルルータモード」にする。
今回の試験の場合はこのルータの先に「アルティスのLAN」があり、外部への接続も「アルティスのLAN」内のルータがやってくれるので「ローカルルータモード」で。

自動接続／接続モード
これまた大昔の遺物機能。外部ネットへの常時接続が当たり前ではなかった時代は繋いでいる時間だけ料金がかかった。そのためWAN側の通信を「手動で接続する」か「外部へのアクセスがあった時に自動で接続して良いか」を選ぶことができた。現在は常時接続が当たり前で時間に関わらず料金変わらないし、そもそも今回はWANポートの先は料金のかからない「別のLAN」なので「自動接続：する／接続モード：常時接続」でOK。「しない」「要求時接続」にしても面白いといえば面白い。その際の接続制御はマニュアル5-8p、DISCスイッチで制御（DISC => Disconnect）

★WAN側自動接続設定（ローカルルータ）
DHCPクライアント機能
このルータのIPアドレスを自動取得するか、自分で固定IPを設定するかということ。つまり「WANポート」のIPアドレスをどうするかと問われている。
通常は「有効」「自動取得要求する」。無効にした場合は自分でWAN側IPアドレスを指定することになり、不適切であればWANポートは機能しない。是非にいじってみるべし。

ゲートウエイ
「デフォルトゲートウェイ」という名前で求められることも多い。WANに流したデータは、その次に何処に行けば良いのかという指示。通常は「その先にある上位のルータ」なのでそのIPアドレスを指定しなければならないが、DHCPクライアント機能が生きていればそのアドレスは自動的に提供されるので「優先する」にしておけば勝手につながる。敢えてOFFにして敢えて誤った設定にするとWAN側のネット、今回の場合は「アルティスLAN」にはつながるが、その先（外部のネット）には繋がらなくなる。
DHCPクライアント機能を有効にしておけばDHCPサーバが適切な値を設定してくれる。

★LAN側設定

IPアドレス／ネットマスク
LAN側から見た、このルータのIPアドレスをどうするのかの設定。間違えるとこのルータにアクセスできなくなるので「設定初期化」を行わなければならない。敢えて変えてみるべし。

「自動設定時の割当数」は平たく言えば「最大何台接続するのか」の数。通常はルータのアドレスの「次」から、この割当数の範囲のアドレスがクライアントに割り当てられる。

DHCPサーバ機能／リースタイム／アドレス割り当てパターン／自動設定時の割当数
LAN側にぶら下がった機器に自動的にIPアドレスを提供する機能。全てルータが勝手に割り振るに任せて良いなら「有効／自動設定」。常に決まったIPアドレスで運用している機器があるなら、そのアドレスは「ルータが割り振るアドレス」からは外しておかねばならない。その場合は「無効」として全ての機材が手動でIPを設定するか、「手動設定」として固定使用するIPアドレスを外した「DHCPエントリ」設定が必要。
「自動設定時の割当数」は平たく言えば「最大何台接続するのか」の数。通常はルータのアドレスの「次」から、この割当数の範囲のアドレスがクライアントに割り当てられる。
「リースタイム」は、割り当てを受けた端末がそのアドレスを使用できる時間。多くの場合は24時間。更新可。期限が迫ってくると当該端末に更新の問い合わせを行い、端末の電源が切れているなどして更新要求がない場合は「アドレスお召し上げ」となり、新しく接続された機材にそのアドレスが割り当てられることがある。

★DHCPエントリ設定

DHCPにより各機材に割り振るIPアドレスの設定。最近は「192.168.0.10-192.168.0.36」のようにアドレス範囲を設定する機材が多いが、このルータは「先頭IPアドレス」と「使う数」を求められる。この範囲のことを「スコープ」と呼んだりする。

★無線LAN側設定

IEEE 802.11bのみ対応。今日ではありえない貧弱機能だが、ルータのオプション機能であることからわかるように当時は貧弱どころかこれでも高等機能。
今日では当然に存在する「無線強度」の設定は存在しない。調節ができるほど強力な電波出せない。
ネットワーク名
SSIDのこと。
使用チャネル
11b、即ち 2.4GHz帯で使用可能なチャネル番号を指定する。近年の機材なら状態の良いチャネルを探して自動的に割り振ってくれるが、この時代の機材は自分で好適なチャネルを探して指定しなければならない。指定可能なチャンネル番号は1-13だが、アルティスでは11から動かさないほうが良さそう。他のチャンネルだと電波が行方不明になる。
暗号化
WEPのみ対応。当時はこれしかなかった。現在は使おうとするとWindowsから警告喰らう程度の強度だがノーガードよりは遥かにマシ。設定方法は大体見ての通り。
子機の接続制限
「ネットワークが不明の場合の参照」は今で言う「SSIDステルス」機能。相手が本気ならステルスしようが突き止めることは可能なのでイタズラ除け程度の機能。

WARPSTAR-A9056C
1234a

[無線LAN側設定]
・WEPによる暗号化は成功
・ステルス（ネットワーク名が不明の場合の参照	拒否する）にすると接続不可

「MACアドレスによる接続制限」は読んで字のごとし。相手が本気ならWEP暗号化以上に簡単に破れるが、イタズラ除けにはそれなりに有用。有効にした場合は別途「詳細設定-MACアドレスフィルタ設定」が必要。試してみて欲しい。


MACアドレス（Media Access Control address）は、ネットワークカード（パソコンやルータなどのネットワーク機器）に付いている番号です。全世界でMACアドレスが重複することはありません。（ただし、MACアドレスを変更するソフトウエアなどもあり、意図的に変更した場合は重複することがあります）
パソコンの有線LANの他にも無線LANやスマートフォンにもMACアドレスが割り当てされています。
MACアドレス確認コマンド
getmac

パケットフィルタを適用したときの挙動。たとえば PC とスマホを共に WARPSTAR-A9056C に接続した状態で、PC の IP アドレスから発信される TCP/80(http) と TCP/443(https) の通信をブロックする設定を加える。この時に PC から WebSite にアクセスできなくなるが、tracert 等ほかの通信はできる。スマホは全ての通信が変わらず可能、といった点。


★パケットフィルタ設定
LAN側／WAN側
「LAN側の口 - このルータ - WAN側の口」という構成になっており、このどちら側でパケットをチェックし、止めるのかということ。
種別
「発信しない」はWANを要求時自動接続の設定とした時に「このパケットでWAN側の回線を開くのか」ということ。常時接続なら関係ない。
送信元／宛先
IP Address/SubnetMask の形式で指定する。ex. 192.168.10.0/24、192.41.192.145/255.255.255.255
宛先ポート
読んで字の如し。137-139(netbios)と445はWindowsのファイル共有に用いられるが外部にパケット流しても良いことはひとつもないので真っ先に塞ぐ。そのほか外から来る「ウェルノウンポート」は通常閉じて良し。そのほかマルウェアが使用するポートを塞ぐといくらかセキュリティに寄与し、「塞ぐべきポート」等で Google るとリストがいろいろ出てくる。

Well Known Port Number	0 ～ 1023

対して送信元：ローカルIPの範囲、宛先*、プロトコル：TCP、送信元ポート*、送信先ポート 80(www/http)+443(https)、順方向・・・とすると、LAN側から外部Webサイト閲覧が一切不可能になるので試してみるべし。

★ポートマッピング設定
やっていることはWSL上に立てたサーバに外部からアクセスする時に行った設定と大体同じ。WAN側から来た通信を、LAN内に流したい時に設定する。のだが、このルータでは流す先のアドレスは指定できるのに宛先ポートが指定できないので「ポートマッピング（NAPTエントリの設定）」ではなく正確には「NATエントリの設定」である。

☆静的ルーティングの設定
　ルータは基本的に「LAN 内宛ではない」データを問答無用で WAN 側にぶん投げてしまう。それを「特定の宛先のもののみ WAN 側に流す」あるいは「WAN 側ではなく LAN 内のこいつに流せ」等の指定をするもの。家やオフィスの中でルータがツリー状の多段構成になっている場合は設定する必要があるが、それ以外の場合は無設定で問題ない。

★高度な設定
これも通常触らないが、「UPnP機能」だけは事情なき限り「使用しない」にするべき。ONにするとゴミパケットを流しまくる上にセキュリティ的にも穴ができる。

UPnPとは、Universal Plug and Play(ユニバーサル プラグ アンド プレイ)の略です。
Universal Plug and Playは、"Universal Plug and Play Forum"で規定されたネットワークに接続する機器同士を、接続しやすくするための機能です。
以下の機能があります。
UPnPによるデバイス検出対応
LAN内の機器からのポートマッピング要求対応
LAN内の機器へのWAN側IPアドレスの通知

★情報-現在の状態
「IP取得」「IP解放」はWAN側アドレスをDHCP取得にした場合に意味を持つ。「解放」で割り当てられたIPアドレスを「もう使わないから返すわ」としてサーバに通知し、WAN側アドレスは「なし」になる。当然通信はできなくなる。「取得」でDHCPサーバにアドレスを要求する。

★☆★☆
で、何をどうするのを体験してほしいかというと
WARPSTAR-A9056C に繋いだときと TP-Link_119B に繋いだときの tracert の結果の違い
LAN 側ネットワークアドレスや DHCP 設定を変更したときに PC に割り振られる IP アドレスの変化。192.168.10.x だけではなく 172.31.x.x や 10.x.x.x といったローカルアドレスも試してみて欲しい

  1     3 ms     5 ms     3 ms  warpstar-a9056c [192.168.10.1]
  2    34 ms   215 ms     9 ms  192.168.0.1
  3     *      112 ms     9 ms  ntt.setup [192.168.1.1]
  4    23 ms    13 ms    14 ms  118.23.89.230
  5    66 ms   233 ms    33 ms  118.23.89.41
  6    43 ms    16 ms    21 ms  221.184.5.193
  7     *       37 ms    27 ms  125.170.97.97
  8    30 ms    29 ms    34 ms  125.170.97.130
  9    56 ms    61 ms   111 ms  60.37.54.166
 10    27 ms    28 ms    30 ms  210.232.233.254
 11    33 ms    42 ms    41 ms  103.3.0.3
 12   281 ms   124 ms    59 ms  103.3.0.9
 13    50 ms    55 ms    48 ms  sapporo-artis.com [183.181.96.150]


  1     *        3 ms     4 ms  warpstar-a9056c [172.31.10.10]
  2     *        *        4 ms  192.168.0.1
  3     5 ms     7 ms     4 ms  ntt.setup [192.168.1.1]
  4    12 ms    11 ms    17 ms  118.23.89.230
  5    13 ms    13 ms     *     118.23.89.41
  6    14 ms    13 ms    12 ms  221.184.5.193
  7    27 ms    27 ms    32 ms  125.170.97.97
  8    30 ms    28 ms    29 ms  125.170.97.130
  9    38 ms    35 ms    29 ms  60.37.54.166
 10     *       66 ms    68 ms  210.232.233.254
 11    35 ms    37 ms    45 ms  103.3.0.3
 12    49 ms    49 ms   182 ms  103.3.0.9
 13  1423 ms    44 ms    35 ms  sapporo-artis.com [183.181.96.150]


  1     *        *       12 ms  warpstar-a9056c [10.0.0.10]
  2     *       86 ms     *     192.168.0.1
  3     *        *     1414 ms  ntt.setup [192.168.1.1]
  4     *       54 ms    90 ms  118.23.89.230
  5    21 ms    14 ms    42 ms  118.23.89.41
  6   168 ms    26 ms    12 ms  221.184.5.193
  7    46 ms    34 ms    37 ms  125.170.97.97
  8    40 ms    31 ms    61 ms  125.170.97.130
  9   139 ms    35 ms    31 ms  60.37.54.166
 10    35 ms    44 ms     *     210.232.233.254
 11    33 ms    33 ms    33 ms  103.3.0.3
 12   152 ms    50 ms    53 ms  103.3.0.9
 13    36 ms    37 ms    45 ms  sapporo-artis.com [183.181.96.150]


TP-Link_119B
  1     2 ms     1 ms     1 ms  192.168.0.1
  2     7 ms     2 ms     2 ms  ntt.setup [192.168.1.1]
  3    56 ms    54 ms    54 ms  118.23.89.230
  4    11 ms    11 ms    18 ms  118.23.89.41
  5    15 ms    11 ms    17 ms  221.184.5.193
  6    33 ms    30 ms    29 ms  125.170.97.97
  7    66 ms    90 ms    74 ms  125.170.97.130
  8    78 ms    72 ms    73 ms  60.37.54.166
  9    79 ms    70 ms    69 ms  210.232.233.254
 10    74 ms    77 ms    77 ms  103.3.0.3
 11   116 ms    85 ms   221 ms  103.3.0.9
 12    77 ms    78 ms    82 ms  sv12789.xserver.jp [183.181.96.150]


有線接続
  1    <1 ms    <1 ms    <1 ms  warpstar-a9056c [10.0.0.10]
  2     1 ms     1 ms     1 ms  192.168.0.1
  3     2 ms     2 ms     2 ms  ntt.setup [192.168.1.1]
  4    19 ms    15 ms    17 ms  118.23.89.230
  5    15 ms    20 ms    29 ms  118.23.89.41
  6    11 ms     8 ms     9 ms  221.184.5.193
  7    67 ms     *       24 ms  125.170.97.97
  8    71 ms    70 ms    71 ms  125.170.97.130
  9    70 ms    70 ms    73 ms  60.37.54.166
 10    67 ms    66 ms    67 ms  210.232.233.254
 11    72 ms    74 ms    69 ms  103.3.0.3
 12    52 ms    50 ms    50 ms  103.3.0.9
 13    34 ms    54 ms    77 ms  sapporo-artis.com [183.181.96.150]


パケットフィルタを適用したときの挙動。たとえば PC とスマホを共に WARPSTAR-A9056C に接続した状態で、PC の IP アドレスから発信される TCP/80(http) と TCP/443(https) の通信をブロックする設定を加える。この時に PC から WebSite にアクセスできなくなるが、tracert 等ほかの通信はできる。スマホは全ての通信が変わらず可能、といった点。

発信元IPアドレスは192.168.10.2./255.255.255.255が正解。
特定のIPアドレス「だけ」の場合はスラッシュの後は全部255になるんだ。
192.168.0.2./255.255.255.0だと、192.168.0.2を含むネットワーク全部（192.168.0.1-192.168.0.255）がブロックされちゃう。

▽★
意気込みあらば。
PC を WARPSTAR-A9056C に、
スマホをアルティス WiFi につなぎ、以下のような構成にする
+--- 他のアルティス利用者
+--- スマホ
|
192.168.0.?(WAN)
今回貸し出したルータ
192.168.10.1(LAN)
|
+---- WARPSTAR-A9056C に繋いだ PC
このとき、PC で Web サーバを立ち上げ、スマホからアクセスする。
NAT 設定により「外部から 80 番ポート(http)にアクセスが来たら[PCのIPアドレス]にデータを回せ」という設定が必要。

ポートマッピングは難しい。
とりあえずPCとスマホの両方をアルティスWiFiに繋いだ状態でスマホからPC上のWebサーバにアクセスできるかテスト。サーバが何番ポートを使ってるのか気をつけてね。

それがOKならPCをWARPSTARの下に移して、「WARPSTARの外から（サーバが使ってるポート）番ポートへのアクセスがあったらPCのIPアドレスに回してね」という設定をする。それで遠るハズなんだ。が、それだけのことが難しい。
それが通ったらまたパケットフィルタの設定に戻って、「外から（サーバが使ってるポート番号）のアクセスがあっても遮断な？」という設定をすると繋がらなくなる。
・・・というあたりで一通り終了、といったところかな。

211
▽
ほかにいじってみたい所があれば自由に。
何かあっても初期化かければ大体なんとかなるので。

WAN側はアルティスのLANになっていて、こっちのネットワークアドレスは192.168.0.0/24です。
192.168.0.1に更に外部へのルータが建っており、DHCPで配下に192.168.0.2-192.168.0.199のアドレスを配ってます。
なお192.168.0.200はプリンタが固定アドレスとして使っています。
▽
というわけでルータのWAN側DHCPクライアント機能を切った場合、ルータのWAN側IPアドレスに指定すべきは192.168.0.201-192.168.0.254のいずれか。（デフォルト）ゲートウエイは「更に外側へのルータ」のアドレス192.168.0.1を指定。DNSは身内では建てていないので、これもゲートウエイと同じ192.168.0.1を「プライマリ」に指定してぶん投げる。「セカンダリ」は空白のままで構わない:meow_fingerguns2:
これで外のネットに繋がるはずよ。

----------------------------------------------------
ネットワーク

netstat は「自分がいま何処との通信経路を開いているのか」ということを調べるコマンド。
試しにいまあたしの PC で発行してみると
  TCP         192.168.0.33:49408     20.198.119.84:https    ESTABLISHED
  TCP         192.168.0.33:49409     20.198.119.84:https    ESTABLISHED
こんなのが表示された。192.168.0.33（自分のIPアドレス）の49408と49409ポートを利用して、20.198.19.84（相手先IPアドレス）のhttps（セキュアなWebサービス）とESTABLISHED（接続確立中）ってことがわかる。
こっちからのデータリクエストは20.198.119.84:httpsに飛んでいって、向こうからの返信をこちらは49408と49409番ポートで受信している、ということ。実際にはどちらかが受信用、他方が送信用のポートだと思うんだけど・・・
▽
nsloopup はサーバ名からIPアドレス、あるいはその逆を問い合わせるコマンド。
なんだけど今の Windows 環境では素直に動かないことが多いみたいね。Linux の dig コマンドがほぼ同じ動きをして素直に動くので、あとで試しましょう。使い方も説明します。
▽
ping は相手先が生きているか死んでいるかの確認に使われます。
応答時間もわかるので、どこかで通信が詰まってないかの確認にも。
▽
tracert は通信経路の確認です。
これも応答時間がわかるので、どこかで通信が詰まれば具体的にどこなのかというところまで追求可能。
後で使い方を簡単に解説します


tracert が面白いということだけど、それとセットで使うツールに WHOIS（ふーいず）というデータベースがある。
IPアドレスの割当相手やらドメインの所有者情報やらなんかが見れる。
日本国内の場合、IPアドレスから調べるなら JPNIC（じいぇいぴーにっく）WHOIS
https://www.nic.ad.jp/ja/whois/ja-gateway.html
ドメイン名から調べるなら JPRS WHOIS
https://whois.jprs.jp/
日本国外だと IP アドレスから調べるなら APNIC（アジア太平洋）、ARIN（北米）、RIPE（欧州）なんかの WHOIS を叩くことになるかも（あるいは「こっちに訊け」と示される先）
https://wq.apnic.net/static/search.html
http://whois.arin.net/ui/　右上の小さな窓
https://stat.ripe.net/widget/whois
同じく日本国外のドメインなら IANA か ICANN あたり
https://www.iana.org/whois
https://lookup.icann.org/en
▽続

▽
と、データベースのアドレスだけ列挙されても遊び方がわからない。
例としてアルティス WebSite の sapporo-artis.com を探ってみよう。
日本国外のドメインなので IANA の検索に sapporo-artis.com をぶち込む。
いろいろ出てくるけど、注目すべきは上の方
refer:        whois.verisign-grs.com
詳しいことは verisign-grs.com の whois に訊けと。
そういうわけで verisign の whois に飛んでみる
https://webwhois.verisign.com/webwhois-ui/index.jsp
ここでまた sapporo-artis.com。
いろいろ出てくるけどいくつか面白い情報が出てくる
Registrar WHOIS Server: whois.discount-domain.com
Registrar URL: http://gmo.jp
GMO のサービスを利用して登録されたドメインということがわかる。discount-domain.com とも出てるから「お名前.com」を利用したのだろうという推測が立つ。
Creation Date: 2023-06-16T01:51:08Z
協定世界時 2023 年 6 月 16 日に登録されたらしい。
Name Server: NS1.XSERVER.JP
Name Server: NS2.XSERVER.JP
Name Server: NS3.XSERVER.JP
Name Server: NS4.XSERVER.JP
Name Server: NS5.XSERVER.JP
sapporo-artis.com を「直接知っている」ドメインネームサーバ(DNS)はこいつらだから、IP アドレスを知りたければこいつらに訊いてねというリスト。奇天烈な構成をしていなければ sapporo-artis.com サーバと、そいつを「直接知っている」DNS は同じデータセンターにあるはずなので、sapporo-artis.com は「エックスサーバ」のサービスを利用していることがわかる。
▽続

ではもう少し具体的に。
https://sapporo-artis.com/ でつながる先はどうなっているのか。
ここからは Linux の dig というコマンドを使う
$ dig sapporo-artis.com
「sapporo-artis.com の IP アドレスを教えてくれ」というコマンド。いろいろ出てくるけど注目するところは
;; ANSWER SECTION:
sapporo-artis.com.      3600    IN      A       183.181.96.150
これ。IP アドレスは 183.181.96.150 ということがわかる。
では https://183.181.96.150/ にアクセスするとどうなるかというと・・・もしかすると警告が出るかもしれない。無視して突き進むと
無効なURLです。
と出てくる。sapporo-artis.com = 183.181.96.150 ではなかったのか。何故サーバ名指定だと繋がって、IP アドレス指定だと繋がらないのか。答えは「逆引き」というものを試してみるとなんとなくわかる
$ dig -x 183.181.96.150
こうすると IP アドレスからサーバ名がわかる（逆引き）。この場合は 183.181.96.150 のサーバ名を教えてくれということ。結果は
;; ANSWER SECTION:
150.96.181.183.in-addr.arpa. 3600 IN    PTR     sv12789.xserver.jp.
sv12789.xserver.jp という、ぜんぜん違う名前が返ってくる。これはいまどきの Web サーバにありがちな「仮想ホスト」というやつ。サーバがマンションだとすれば sv12789.xserver.jp というのは建物名、sapporo-artis.com というのは入ってるテナント名みたいなもの。故に sapporo-artis.com なら部屋番号まで特定できてページが表示されるけど、sv12789.xserver.jp だと建物名しか指定されていないのでどのページを表示して良いのかわからず、先のようなエラーになるというイメージ。
▽続

▽
ともあれサーバの IP アドレスがわかった。次は 183.181.96.150 の属するネットワークに関して探ってみる。183.x.x.x だから「クラスB」のネットワークだけど、実際には CIDR で更に細切れにされている可能性が高いのでとりあえず 183.181.96.0 でアタリを付けてみる。


CIDR
「Classless Inter-Domain Routing」の略。 サイダーと読みます。 CIDRは、クラスを使わないIPアドレスの割り当てと、経路情報の集成を行う技術です。


IP アドレスからなので IANA whois に訊いてみよう。
https://www.iana.org/whois
で、183.181.96.0 を問い合わせてみる。結果は
inetnum:      183.0.0.0 - 183.255.255.255
organisation: APNIC
status:       ALLOCATED
whois:        whois.apnic.net
183.0.0.0 - 183.255.255.255 は APNIC に割り当ててあるから詳しくは APNIC に訊けということらしい。というわけで APNIC で同じ問い合わせをする。結果はまたずらーっと出てくるけど、上から拾い読みすると
inetnum:	183.181.96.0 - 183.181.99.255
183.181.96.0-183.181.99.255 の範囲が同じネットワークとして利用されているらしい。183.x.x.x なので原則から言えば「クラスB」にあたり、



IPアドレスの
最初の文字

	クラス	用途（ネットワークを構成するパソコンの台数）
1～126	クラスA	大規模ネットワーク用（最大約1600万台）
128～191	クラスB	中規模ネットワーク用（最大約65000台）
192～223	クラスC	小規模ネットワーク用（最大254台）



同じネットワークの範囲は 183.181.0.0-183.181.255.255 になるはずだが、やはり CIDR でコマ切れにされている。
続けて
descr:	XSERVER Inc.
descr:	GRAND FRONT OSAKA TOWER A 32F,4-20,
descr:	Ofukacho,Kita-ku,Osaka-city
このネットワークの利用者が XSERVER Inc. であることがわかる。やはり「エックスサーバ」を利用しているようだ。所在地が大阪になっているのでサーバも大阪にある・・・とは限らない。データセンターは別の場所にあるかもしれない。
▽続

▽
何をすればわかるかというと、tracert(Windows) / traceroute(Linux) をかけるとわかることがある。
これは相手先からどのルータ／サーバを経由して自分の手元にデータがやってくるのかを調査するコマンド。とりあえず Windows の tracert で試してみよう。
> tracert sapporo-artis.com

sapporo-artis.com [183.181.96.150] へのルートをトレースしています
経由するホップ数は最大 30 です:

  1     1 ms     1 ms     1 ms  192.168.0.1
  2     6 ms     4 ms     4 ms  118.23.89.227
  3     8 ms     5 ms     7 ms  118.23.89.21
  4     8 ms     9 ms     4 ms  221.184.5.205
  5    20 ms    17 ms    17 ms  122.1.245.193
  6    19 ms    18 ms    18 ms  122.1.245.206
  7    20 ms    26 ms    35 ms  122.1.245.70
  8    20 ms    20 ms    20 ms  210.232.233.254
  9    25 ms    25 ms    25 ms  103.3.0.3
 10    46 ms   169 ms    41 ms  103.3.0.13
 11    26 ms    31 ms    27 ms  sv12789.xserver.jp [183.181.96.150]
上の方が自分側。下の方が相手方。自分の手元にデータが来るまでに、10→1の10のルータ／サーバを経由してきていることがわかる。192.168.0.1 というのはもちろんコピー機横においてあるアルティスのルータ。
で・・・ルータ／サーバの名前がどこかの DNS に登録されていれば IP アドレスと一緒に表示されるんだけど、どれも名前が割り振られてないみたいね。名前が付いていれば大抵データセンターの名前が付いているんでおおよその場所が推定できるんだ。
▽
というわけで別のところ行こう。112.78.202.1 とか良いだろう。「さくらインターネット」の石狩市にあるデータセンターのサーバ。石狩にあるってわかってるんだから今更調べる必要もないけど例として
> tracert 112.78.202.1

112.78.202.1 へのルートをトレースしています。経由するホップ数は最大 30 です

  1     1 ms     1 ms    <1 ms  192.168.0.1
  2    10 ms     4 ms     4 ms  118.23.89.227
  3     6 ms     6 ms     5 ms  118.23.89.21
  4     8 ms     5 ms     4 ms  221.184.5.201
  5    20 ms    21 ms    19 ms  125.170.97.97
  6    21 ms    22 ms    21 ms  125.170.97.130
  7    21 ms    21 ms    20 ms  ae-8.a03.tokyjp05.jp.bb.gin.ntt.net [120.88.53.17]
  8     *       23 ms    35 ms  ae-3.r33.tokyjp05.jp.bb.gin.ntt.net [129.250.5.95]
  9    20 ms    20 ms    22 ms  ae-11.a00.tokyjp10.jp.bb.gin.ntt.net [129.250.6.33]
 10    23 ms    22 ms    22 ms  ce-0-1-2.a00.tokyjp10.jp.ce.gin.ntt.net [203.105.73.106]
 11    45 ms    40 ms    41 ms  iskrt301-tkert1.bb.sakura.ad.jp [157.17.131.38]
 12    39 ms    40 ms    39 ms  iskrt301s-rt301.bb.sakura.ad.jp [103.10.113.6]
 13    39 ms    59 ms    40 ms  iskrt202b-rt301s.bb.sakura.ad.jp [103.10.113.86]
 14    38 ms    38 ms    39 ms  112.78.202.1

トレースを完了しました。
ということで目的のサーバが最初に経由する地点に iskrt202b というキィワードが出てる。ここの会社は東京、大阪、石狩にデータセンターを持っていると公表しているので、iskr ってのは「石狩」の子音を抜き出したものなんだろうなぁと推測がつく。東京なら tkyo、大阪なら oska とかになるのかな。
ところで途中に tokyjp??.jp.ce.gin.ntt.net という文字列が見える。右側の方を見ての通りの NTT のグローバルネットワーク(GIN)を経由してるんだけど、左の方に tokyjp という文字が見える。ふつーに考えて「東京-日本」だろう。石狩のデータセンターから東京を経由してまた札幌のアルティスまで戻ってきていることになる。ご苦労なこった。
対して自分に近い方の IP アドレス所有者を見てみると、ゔぇーるくれーる東札幌では OCN のアドレスが並んでる。利用している ISP（プロバイダ）が OCN ということがわかる。アルティスも OCN のハズ。


ISP（インターネットサービスプロバイダ）


▽続
14:21
▽
同じように大統領選挙で盛り上がっているホワイトハウスを手繰ってみよう。
多分相手方に近い方は
  9    22 ms    20 ms    20 ms  ae-0.a00.tokyjp10.jp.bb.gin.ntt.net [129.250.6.48]
 10    23 ms    22 ms    22 ms  xe-0-0-0.bbr01.eq01.tok01.networklayer.com [61.213.145.38]
 11    24 ms    22 ms    22 ms  192.0.66.168
こんな感じだと思う。NTT の東京からいきなりホワイトハウスへズドン。情報の流れ的にはワシントンは遠くないようだということがわかる。
あとは自分の好きなところ相手に探り入れて遊んでみて:meow-popcorn:
【了】


の前に、WARPSTAR-A9056CってWiFi電波は捕まえられるかな。練習用のルータが出してる電波なんだけど。
パスワードは 0118509679（アルティスの電話番号）で。Windows からセキュリティが何とかって警告が出るかもだけど無視して構わない。ファイルの共有が何とかってのは「いいえ」で。


ほかに遊べるネタとしては、
・無線 LAN 設定
・ポートマッピング設定
・パケットフィルタもう少し
かなぁ。
パケットフィルタは 80 や 443 の他にも 53 が遊べる。DNS で使われるポートで、たとえば 53/UDP を塞ぐと www.google.com に繋がらなくなる。サーバのアドレスがわからなくなってしまうので。では 142.250.207.4 に直接突撃をかけたらどうなるかというと、通るハズ。DNS が使えなくなるというのはこういう事態になる。
無線 LAN 設定は・・・SSID 隠して「利用可能なWiFi」一覧に出てこなくなるとか、MACアドレスフィルタで「許可なきもの接続を許さず」にすると「許可するアドレス」にスマホのMACアドレス入れてやらないとつなぐことができなくなる、とか。
有線でも繋いだので無線で繋がらなくなっても初期化すればいいなら安心DaNe☆

★ポートマッピングは難しい。
とりあえずPCとスマホの両方をアルティスWiFiに繋いだ状態でスマホからPC上のWebサーバにアクセスできるかテスト。サーバが何番ポートを使ってるのか気をつけてね。

それがOKならPCをWARPSTARの下に移して、「WARPSTARの外から（サーバが使ってるポート）番ポートへのアクセスがあったらPCのIPアドレスに回してね」という設定をする。それで遠るハズなんだ。が、それだけのことが難しい。

それが通ったらまたパケットフィルタの設定に戻って、「外から（サーバが使ってるポート番号）のアクセスがあっても遮断な？」という設定をすると繋がらなくなる。
・・・というあたりで一通り終了、といったところかな。
▽
ルータいじり倒したらネットワークの勉強は一通り終了。
深く斬り込もうと思えばまだまだ深いんだけどね。
「ネットマスク」もなんとなーくで設定してると思うし、IPv6 は一切触ってないし。
でもまぁそのへんは興味があれば。資料も出せるので。
▽
ネットワーク終わったら次はデータベースを学んでほ・・・
じゃない。その前に .htaccess 触ってみようか。
よく触る設定としては
・パスワード認証
・問答無用で外部転送
・問答無用で内部転送
・UserAgentやIPアドレスを見たうえでの転送やアクセス拒否
・ディレクトリのファイル一覧を非表示に
ほかにもいろいろできるけど、基本はこのあたり。
稀に触るところだとサーバ内のファイルを「拡張子によってどういう扱いをするかの設定」ってところかなぁ。

----------------------------------------------------
絵でわかるネットワーク

プロトコル　通信規約
IP　インターネットプロトコル
UNC（Uniform Naming Convention：汎用命名規則）　コンピュータやそこに存在する周辺機器ファイルに名前をつけることができるWindows標準の名前規則
TCP　安全性重視
UDP　コネクションレス　速度重視
パケット　ヘッダ　ペイロード
アドレスの一意性　他と被らない
ブロードキャスト（同報通信）
ユニキャスト（1対1の通信　ブロードキャストの対義語）
ルーティングテーブル
NIC 【Network Interface Card】 ネットワークインターフェースカード
→（インターフェース）コンピュータなどの機器を構内ネットワーク(LAN)に接続するためのカード型の拡張装置。
ゲートウェイ　「あて先ネットワークに至るために転送すべきルータ」
ホップ数　ネットワークを通る回数
メトリック　ネットワーク上での距離
ルーティングプロトコル
スタティックルーティング　人手によって作成されたルーティングテーブルでルーティング
ダイナミックルーティング　最適な経路をルータに自動で計算させる方法
　ディスタンスベクタ型　方向（ベクトル）と距離（ディスタンス）で経路を決める
　リンクステート型　接続の状態によって経路を決める
　RIP（ルーティングインフォメーションプロトコル）　ディスタンスベクタ型の代表的な技術
　　アドバタイズ（広告）　30秒おきに行われる
　OSPF（オープンショーテストパスファースト）　リンクステート型の代表的な技術
　　コストが低い経路を選択する
プライベートアドレス
→必ず定められた範囲のアドレスから設定することが決められている
クラスA用	10.0.0.0～10.255.255.255
クラスB用	172.16.0.0～172.31.255.255
クラスC用	192.168.0.0～192.168.255.255

グローバルアドレス
NAT（ネットワークアドレストランスレーション）
IPマスカレード（NAPT）　NATと書かれていてもIPマスカレードを指していることが多い
トランスポートゲートウェイ型　IPアドレス＋ポート番号を使うファイアウォール
アプリケーションゲートウェイ　アプリケーション層のデータを理解して、通信の可否を判断
ウィルス対策ソフト　メールやWebのデータについてウイルスチェックを行う
DMZ　内部でも外部でもない第3のゾーン　非武装地帯、緩衝地帯

FQDN（完全修飾ドメイン名）　www.kodansha.co.jp　www→Webサーバによく使われるホスト名

WANとは、「Wide Area Network（ワイドエリアネットワーク）」を略したもので、遠く離れたエリアとつながったネットワークのことを指します。通信事業者などを介在する必要がある
LANとLANをつないだワイドなネットワークといえば分かりやすいでしょう。

LANとは、英語の「Local Area Network（ローカルエリアネットワーク）」の頭文字を取ったもので、一定の限定されたエリアで接続できるネットワークのことです。自分で敷設してよい私的なネットワーク

「上位層は下位層の違いにかかわらず、透過的に通信できる」

Wi-Fi
WEP　使用すべきではない
WPA　鍵がころころ変わる
パーソナルモード　家庭用　アクセスポイントに事前に設定したパスフレーズを使用
エンタープライズモード　企業用　より高度なセキュリティ管理ができるように工夫されたもの
サプリカント　接続しようとする端末　WPAの場合は無線LANにつなぐスマホやパソコン
オーセンティケータ　通信のコントロールをする機器　無線LANアクセスポイント
認証サーバ　具体的な認証手段を提供する機器
オンプレミス（on-premises）　企業がサーバーや通信環境などの設備やソフトウェアなどを自社で保有してシステム構築する運用方法のこと。
クラウド　反対に、インターネット経由で自社外の設備を利用する運用方法

DNS（ドメイン・ネーム・システム）　インターネット通信においてドメイン名とIPアドレスを紐づけるシステム
DHCP（Dynamic Host Configuration Protocol）　ネットワークに接続する端末にIPアドレスやその他の通信パラメーターを自動的に割り当てるプロトコル

ハウジング　専門業者が大規模に設置したデータセンター（電源、通信、空調完備）に、自社のサーバを預けること
ホスティング　データセンターに大量のコンピュータが設置されているのは同じだが、その大量のコンピュータは事業者の持ち物
仮想化　物理的なマシンと、利用者が認識する論理的なマシンを分けるもの

IaaS（Infrastructure as a Service）　サービスとして、インフラを提供する　ハードウェア部分を使わせてくれるクラウド
Paas（Platform as a Service）　サービスとして、プラットフォーム部分を使わせてくれるクラウド　ここでいうプラットフォームは、OSや実行環境
SaaS（Software as Service）　サービスとして、ソフトウェアを提供する　ソフトウェア部分を使わせてくれるクラウド　ここでは応用ソフト
XaaS（〇aaSの総称）
　MaaS（Mobility as a Service）　サービスとして、交通手段を提供する


----------------------------------------------------
Docker

WP
localhost:8080
サイトのタイトル wptest-d
ユーザー名 kyosuke3
パスワード kyo39690193wor
メールアドレス artis.kyosuke0530@gmail.com
phpMyAdmin
localhost:8888

WP2
localhost:3000
サイトのタイトル wptest-d-2
ユーザー名 kyosuke4
パスワード kyo39690193wor
メールアドレス artis.kyosuke0530@gmail.com
phpMyAdmin
localhost:3001


WSL2/UbuntuのIPアドレスを取得
Ubuntu上でip aコマンドを実行します。
eth0: のIPアドレス


あれだけ苦労したものが、かようにサクッと構築できてしまうのです・・・
▽何が起こったのか
$ git clone https://github.com/Artisk884/wordpress
GitHub というサイトから WordPress 環境を構築するための設計図 docker-compose.yml をダウンロードしてきた。
$ cd wordpress
ダウンロードしたファイルの詰まっているディレクトリに移動
$ docker compose up
カレントディレクトリにある docker-compose.yml を元に環境構築開始、コンテナを起動する。起動させるべきコンテナは DockerHub というサイトで公開されており、ここからダウンロードしている。
これで使う側はサクッと環境が動いてしまう。
▽Docker 動いている間、何もできないのは不便
$ docker compose up -d
というように -d を付けるとバックグラウンドで動き出す。
$ docker ps
とすると、動いているコンテナが確認できる。
今回の例の場合 wordpress（Webサーバとphp実行環境）、mysql57（データベース）、phpmyadmin（データベース管理）の3つのコンテナが動いているので確認してみて欲しい。
バックグラウンドで動いているコンテナは
$ docker compose down
$ docker stop $(docker ps -q)
いずれかで停止。
機会はないはずだが
$ docker stop [ID/Name]
[ID/Name] のところに docker ps で表示されるコンテナ ID あるいはコンテナ名を指定してひとつひとつ停止させることもできる。

phpMyAdmin にログインし、最初の画面の右の方に MySQL のバージョンが表示されている。現在は
データベースサーバ → サーバのバージョン： 5.7.44 - MySQL
となっていると思う。
そこで、
▽MySQL のバージョン違い環境を作ってみる
コンテナをすべて停止。
新しく適当な名前のディレクトリを掘って、そこに docker-compose.yml をコピー。さらに書き換える
04 | image: mysql:5.7
↓
04 | image: mysql:latest
コンテナ起動
データベースサーバ → サーバのバージョン： 9.1.0 - MySQL 
となっていると思うので確かめてみて欲しい。
このようにいくつもの環境を使い分けながら進めていくことができる。
ほかにも複数の Web サーバやデータベースサーバを同時に起動させるといったことができる（ひとつの PC に複数の WordPress 環境を起動して、ブラウザで見比べながら作業等が可能となる。やり方は後述）。
▽続
13:16
▽コンテナの設定とか
先にも触れたように大体のことは docker-compose.yml に書いてあります。
たとえば 09-12 行目はデータベースの設定
09 | MYSQL_ROOT_PASSWORD: complexstring  ## データベースの root パスワード
10 | MYSQL_DATABASE: wordpress  ## WordPress で利用するデータベース名
11 | MYSQL_USER: user  ## データベースのユーザ ID
12 | MYSQL_PASSWORD: password  ## 上記ユーザのパスワード
を書換えて遊んでみても良い。ただし 26-28 行目「WordPress はどのデータベースに接続するのかという設定」を書き換えるのを忘れないように。
26 | WORDPRESS_DB_NAME: wordpress
27 | WORDPRESS_DB_USER: user
28 | WORDPRESS_DB_PASSWORD: password
↑ここ
なんとなく推察することはできると思うが
23 | - 8080:80
36 | - 8888:80
は、それぞれ wordpress コンテナ、phpmydamin コンテナが利用するポート番号を指定している。ここを書き換えると WordPress や phpMyAdmin を呼び出すためのポート番号が変わる。たとえば
23 | - 3000:80
36 | - 3001:80
とすると、http://localhost:3000 で WordPress を呼び出せるようになる。
docker compose up -d
このコマンドを利用してバックグラウンドでコンテナを起動、これを 3000 と指定した方と 8080 と指定した方の両方を同時に起動させれば、同時に
http://localhost:3000
http://localhost:8080
ふたつのWordPressを並べて呼び出すことも可能になる。
今後案件がやってくるとたぶんこういった技も必要になってきます。




----------------------------------------------------
②Apache/MySQL/phpMyAdminでWordpress環境

UNIX username: kyosuke
password: kyo39690193ubu


▽MySQL の初期セットアップ
インストール時にいろいろ訊かれます。
Would you like to setup VALIDATE PASSWORD component?
パスワード強度チェッカーを導入するか？ → no
Remove anonymous users?
匿名ユーザを排除するか？ → yes
Disallow root login remotely?
リモートからの root ログインを排除するか？ → yes
Remove test database and access to it?
試験用のデータベースを削除するか？ → yes
Reload privilege tables now?
これらの変更を適用して良いか？ → yes

▽MySQL 初期設定時
CREATE DATABASE wordpress;
ここで指定した wordpress が、wordpress で使用するデータベース名になる
変えても良いが後で使うので何に変えたか忘れないこと
CREATE USER 'user'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON wordpress.* TO 'user'@'localhost';
user と password は使いたいユーザ名とパスワードに書き換える。localhost はそのままで良い。

CREATE DATABASE wordpress;

CREATE USER 'user'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON wordpress.* TO 'user'@'localhost';

CREATE USER 'kyosuke2'@'localhost' IDENTIFIED BY 'kyo39690193wor';
GRANT ALL PRIVILEGES ON wordpress.* TO 'kyosuke2'@'localhost';

Apache2のWebルートフォルダは/var/www/html/
表示するページのファイルはここに置く。(WordPressもここにインストール。)とのこと。


▽wp-config.php の設定
define( 'DB_NAME', 'database_name_here' );
define( 'DB_USER', 'username_here' );
define( 'DB_PASSWORD', 'password_here' );
database_name_here → MySQL / CREATE DATABASE で設定したデータベース名
username_here → MySQL / CREATE USER で設定したユーザ名
password_here → MySQL / CREATE USER で設定したパスワード
に、書換える。

http://localhost/wordpress/

wordpress初期設定
wptest2
kyosuke2
kyo39690193wor
artis.kyosuke0530@gmail.com


▽WordPress 起動後、インポート可能容量が小さい場合は
/etc/php/xxxx/fpm/php.ini をチェック（xxxxの部分は導入したphpのバージョンによって変わるので実際にどういうディレクトリができてるか確認すること）
upload_max_filesize と post_max_size の大きさを十分に大きくする

<IfModule mod_rewrite.c>
RewriteEngine On
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
RewriteBase /wordpress/
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /wordpress/index.php [L]
</IfModule>



なんとなく .htaccessをいじって、
/etc/apache2/apache2.conf
の
Options Indexes FollowSymLinks
AllowOverride None
Require all granted
のNoneをAllへ変更し、
a2enmod rewrite
sudo service apache2 restart
でパーマリンク設定を投稿名にしてもjsonエラーが出なくなりました！
参考にしたサイト
https://queries.co.jp/column/tech-note-1/
https://stackoverflow.com/questions/44750315/404-on-http-localhost-wp-json-wp-v2-posts-in-wordpress-using-rest-api-v2


.htaccess


# BEGIN WordPress
# "BEGIN WordPress" から "END WordPress" までのディレクティブ (行) は
# 動的に生成され、WordPress フィルターによってのみ修正が可能です。
# これらのマーカー間にあるディレクティブへのいかなる変更も上書きされてしまいます。
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
RewriteBase /wordpress/
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /wordpress/index.php [L]
</IfModule>

# END WordPress



a2enmod rewrite
sudo service apache2 restart


▽Apache や Docker が動かない場合
なお、アップデートに下記の「Linux カーネル更新プログラム パッケージ」は使用してはならない。あるいは導入後に上記の wsl —update

/etc/php/8.3/apache2/php.ini
upload_max_filesize と post_max_size の大きさを十分に大きくする

▽phpmyadmin インストール中に選択メニューが開きます
Web server to reconfigure automatically
（Webサーバプログラムに何を使うのか）
→apache2 を選択
Configure database for phpmyadmin with dbconfig-common?
（phpMyAdmin を動かすにはデータベースを用意しなければならない。まだ作っていないなら dbconfig-common ってテスト用のデータベースを用意するが、要るか？）
→No を選択（既に wordpress データベースができているので）

sudo systemctl status apache2

sudo systemctl start apache2

sudo systemctl stop apache2




----------------------------------------------------
apache + wordpress

Apache2 / MySQL / phpMyAdmin アンインストール手法に従って WordPress 関連ファイルをすべて消して、
再度これらを構築です。「ubuntu ごと」でなくて OK です。

sudo rm -r /usr/share/phpmyadmin


MySQL password for user root
Kyo3969&0193roO






sudo touch /usr/local/var/mysql/DESKTOP-O3CN50H.local.pid

127.0.1.1



http://your_server_ip/wordpress
http://192.168.0.44/wordpress
192.168.0.44


http://localhost/wordpress/


データベース名	wordpress_test
ユーザー名 kyosuke
パスワード パスワード
データベースのホスト名 localhost


MySQL(WP) phpMyAdmin
データベース名 wordpress
ユーザー名　kyosuke
pass Kyo3969&0193myS




データベースのホスト名　localhost
テーブル接頭辞　wp_

worpress
サイト名　wptest
ユーザー名　kyosuke
パス　kyo39690193wor
artis-otani0530






http://localhost/wordpress/wp-admin/
http://localhost/wordpress/wp-login.php




phpMyAdmin
http://localhost/phpmyadmin/


http://localhost/wordpress/wp-json/wp/v2/posts/107?_locale=user 404 (Not Found)

----------------------------------------------------
MySQL
CREATE USER 'kyosuke'@'localhost' IDENTIFIED BY 'kyo39690193mys';
GRANT ALL PRIVILEGES ON wordpress.* TO 'kyosuke'@'localhost';

▽MySQL 初期設定時
CREATE DATABASE wordpress;
ここで指定した wordpress が、wordpress で使用するデータベース名になる
変えても良いが後で使うので何に変えたか忘れないこと

CREATE USER 'user'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON wordpress.* TO 'user'@'localhost';
user と password は使いたいユーザ名とパスワードに書き換える。localhost はそのままで良い。


apache2

/etc/apache2/apache2.conf
80行目
DefaultRuntimeDir ${APACHE_RUN_DIR}


Syntax error on line 80 of /etc/apache2/apache2.conf: DefaultRuntimeDir must be a valid directory, absolute or relative to ServerRoot
-----------------------------------------------------------------
samba
実機上に nginx 突っ込んで別端末から表示確認を試してみるとか


-----------------------------------------------------
〇WSL2で起動したサーバーに外部の端末からアクセスする

さて、
Web サーバが建っていろいろ表示できることが確認できたら、次は手持ちのスマホ等外部端末から表示させてみよう！
・・・という手順に関して。ちょいと準備が必要です。
敢えて簡潔に説明しますので、わからないところはまず調べてみて下さい。「だがわからん！」となれば訊いて下さって構いませんので:meow_bread:
▽
スマホはアルティスの WiFi に接続して下さい。
パスワード等は長内さんか西澤さんに。
<半ば余談>
キャリアの電波（5G/LTE）等、それ以外のところからアクセスしようとすると下記の設定以外に更に「アルティスの情報出入り口に鎮座しているルータのセキュリティ（ポート開放）、ポートフォワード設定、ルータのグローバル IP アドレス取得」が最低限必要になります。
なおこれはアルティスのネット回線が昔ながらの IPv4/PPPoE という仕組みを利用しているので「これだけで済みます」。今どき高速回線の IPv6/IPoE だと「IPv4 over IPv6 が使用できることの確認、使用可能なポートの確認、使用ポートの選定」といった更に複雑で面倒でわかりにくくい作業が必要になることが多くあります。データセンター等にあるサーバなら面倒ないのですけどね・・・
</半ば余談>
▽
スマホからどこにアクセスすれば良いのかという情報として、稼働している Windows マシンの IP アドレスが必要になります。
Windows PC 自身の IP アドレスの調べ方はあちこちに解説が出ている＆いろいろ方法があるので調べてみて下さい:meow_bongo-keyboard:
▽
スマホから Windows PC の IP アドレスにアクセス。
・・・しても、Windows 上で Web サーバが動いているわけではなく、外部からのリクエストを「Windows 上で Linux」に流してくれるわけでもないので反応がありません。そもそも Windows 自身のセキュリティ機能で外部からのリクエストをブロックしてしまいます。そこで「Windows セキュリティ機能の一部解除」「外部からリクエストがあったら Linux の方に流すように指示」の操作が必要になります。
これに関してはくっっっっっっっっっっっっっっっっっっそわかりにくい説明であふれているので、かろうじて「わかりにくい人にもわかりそう」な説明を示します↓
https://gunmagisgeek.com/blog/other/7171
https://wiki.mcneel.com/ja/zoo/window7firewall
ただしこれも Windows のコマンドプロンプト／Powershell で行う操作と Linux で行う操作とがごっちゃに解説しているになっているのでよーく注意して下さい。
耳慣れない用語があればこの機会に調べてもらえると。
・・・と言っている間に「Windows セキュリティ機能の一部解除」は終わってしまいましたね。外部アクセスではなくローカルアクセスを止められてしまうとは・・・
▽
うまくいかない場合：
Windows PC の IP アドレス、Linux の IP アドレスは合っていますか？
前者は 192.168.0...、後者はおそらく172...となっています。
「Windows セキュリティ機能の一部解除」「外部からリクエストがあったら Linux の方に流してという指示」のポート番号や TCP/UDP の指定は合っていますか。通常は 80/TCP、https アクセスなら 443/TCP の指定が必要です。
参考：https://wa3.i-3-i.info/diff61tcpudp.html
▽
試験が終わったら
「外部からリクエストがあったら Linux の方に流すよう指示」の削除、「セキュリティ機能の一部解除」をもとに戻してくださいね。

１．ホストOS(windows)のipアドレスを確認(コマンドプロンプト)
ipconfig
172.26.240.1

192.168.0.44



２．wsl2(ubuntu)のipアドレス確認
ip a show dev eth0
172.26.248.209

netsh.exe interface portproxy add v4tov4 listenaddress=192.168.0.44 listenport=80 connectaddress=172.26.248.209 connectport=80

netsh.exe interface portproxy add v4tov4 listenaddress=172.26.240.1 listenport=80 connectaddress=172.26.248.209 connectport=80
 
設定確認
> netsh.exe interface portproxy show v4tov4
 


削除するときは以下
> netsh.exe interface portproxy delete v4tov4 listenport=80 listenaddress=172.26.240.1

netsh.exe interface portproxy delete v4tov4 listenport=80 listenaddress=192.168.0.44


http://172.26.240.1:80

http://192.168.0.44:80

WSL2 + nginx で自分の作ったwebページの表示、スマホからできました！
コマンドプロンプトで出てきたIPアドレスじゃなく、
ネットワークと共有センターのwi-fiの詳細に出ていたIPアドレスを
コマンドプロンプトで設定したらできました！


\\192.168.53.110\share

-----------------------------------------------------
〇nginx 公開ディレクトリの変更
/etc/nginx/nginx.conf
公開ディレクトリがデフォルトでは/usr/share/nginx/htmlになっている。
/var/www/htmlに変更する。

$ sudo vim /etc/nginx/nginx.conf
serverコンテキストのlocationディレクティブに設定を追加する。

server {
    location / {
        root /var/www/html
    }
}
nginxを再起動する。


$ systemctl restart nginx



Linux インストールの件。
Windows 上で仮想マシンを動かすノリで Linux を動かすことができます。
手順はこちらに↓
https://www.kagoya.jp/howto/it-glossary/develop/wsl2_linux/
▽
上記説明4節の MicrosoftStore から種類を選ぶところ、今日の選択肢はふたつあります。
Ubuntu 24.04.01 LTS（うぶんつ）：個人で多く使われている。その分、困ったときのお助け記事も多い。
AlmaLinux OS 9（あるま）：中小規模のサーバで多く使われている。かつてあった CentOS（せんとおーえす）の後継。ヘルプ記事はサーバ関連のものが多いかも。
基本的な操作は同じ。大きく違うのはツール／アプリ（パッケージ）を導入する時かなと。迷ったら Ubuntu。
▽
「Windows Terminal」は入れても入れなくても OK。Windows11 なら最初から入ってる。
「MicrosoftStore」からインストールしたならスタートメニューに「Ubuntu」なり「AlmaLinux」なりが新しく登録されているはずなのでそっちから起動することもできる。
▽
何故か説明されていない「Windows 上で Linux」の終了方法。
コマンドラインから「exit」あるいは閉じるボタンぽちー。
▽
Windows とのファイルのやり取り。
Windows から見た Linux はエクスプローラから行けます。
Linux にログインしたときのディレクトリは通常
/home/ユーザ名
添付画像参照
Linux から見た Windows は
/mnt/c
が「ドライブC」になります。
他のドライブ、たとえば USB メモリなんかにアクセスしたい場合は
この記事を参考にしてみて↓
https://learn.microsoft.com/ja-jp/windows/wsl/wsl2-mount-disk
取り外すときは例えば
sudo unmount /mnt/d
で。 （編集済み） 
カゴヤのサーバー研究室カゴヤのサーバー研究室
WindowsでWSL2を使って「完全なLinux」環境を作ろう！ - カゴヤのサーバー研究室
WSLとは、Windows上でLinuxを動作させるための実行環境です。新しいバージョンである「WSL2」ではWindows上で「完全なLinux」が動かせるよ
執筆者
小泉 健太郎
推定読み取り時間
14分
2022年4月8日 (94 kB)
https://www.kagoya.jp/howto/it-glossary/develop/wsl2_linux/

learn.microsoft.comlearn.microsoft.com
WSL 2 で Linux ディスクのマウントを開始する
WSL 2 でディスクのマウントを設定する方法と、そのアクセス方法について説明します。 (93 kB)
https://learn.microsoft.com/ja-jp/windows/wsl/wsl2-mount-disk

11:06
画像貼り忘れた:あせあせ:
名称未設定 1.png
 
名称未設定 1.png




AR長内 隆晟
  11:10
ubuntuのインストールが終わりましたら
"端末"というアプリを開いて
sudo apt-get install update
と
sudo apt upgrade
（編集済み）
11:10
もやっておいた方が良いですね


小林雅美/Artis
  11:19
今回の「Windows 上で Linux」だと最初から「端末」アプリが開かれた状態になってます。
なので表示されてるコマンドラインから直接
sudo apt update
sudo apt -y upgrade
で。apt-get は古いコマンドっす・・・

WindowsからLinuxのファイルシステムにアクセスするには、エクスプローラーのアドレスバーに \\wsl.localhost\ を入力します。 これにより、インストールされているLinuxディストリビューションのファイルシステムにアクセスできるようになります。





▽ここらで「実際の Linux」を触ってみましょう
使うのは USB メモリひとつと、個人利用で人気の高い「Linux Mint」Ver.22。
とりあえずここ↓にアクセスします
https://linuxmint.com/
なんかいろいろ書いてあるけどとりあえず左寄りにある Download を叩く。
すると Cinnamon（しなもん）とか Xfce（えっくすえふしーいー）とか MATE（まて）とか出てくるので、下の方の MATE Edition のところの Download を叩く。
ちなみにこいつらの違いは Windows でいうところの「テーマ」の違いみたいな感じ。
次の画面は「どこのサーバからダウンロードするのか」と聞かれているので、下の方にスクロールして Japan のサーバを探す。今だと repo.jing.rocks ってところひとつらしいので、とりあえずこれを叩く。
するてーと LinuxMint MATE Editon のデータが落ちてくるのだけど、アルティスの回線で落ちてくるの待ってると日が暮れてしまうので先にご用意しました。デスクトップの linuxmint-22-mate-64bit.iso がそれ。このデータを USB メモリに突っ込んで、PC を起動できるようにします。
といっても単にデータをコピーしただけでは起動できないので、Rufus（るーふぁす）というツールを使います↓
https://rufus.ie/ja/
どれか迷ったら rufus-4.5p.exe を選択。
ダウンロード待ちの間に空（あるいは中身が消えて良い）USB メモリをぷすっ☆
ダウンロードできたらデスクトップでもどこでも良いから適当にフォルダ作って、その中に rufus-4.5p.exe を放り込み、実行。なにか聞かれたらとりあえず「はい」と答えておけば良い。
起動すると「ドライブプロパティ」がなんとかって画面になるはず。
最上段の「デバイス」から USB メモリを選んで、
次の段の「ブートの種類」は右の方の「選択」からデスクトップの(?) linuxmint-22-mate-64bit.iso を選択。
あとは下の方まで流して「準備完了」の下の「スタート」をポチ。
なにか聞かれたらとりあえず「消えてよし」「ダウンロードする」の意味ではいはいと答えておけば良し。
このあたりわからないことがあれば長内さんに訊けばきっと解決します。
――しばらく時間がかかります――
「スタート」の上のバーが進行中表示から再度「準備完了」になれば終了。
「書き込みが完了しました」とかゆーてくれないのがこのツールの不満点。
とりあえず Rufus を閉じる。
「もう2度と使わないな」という場合はフォルダごと消してしまえばアンインストールも完了。「また使うかも」という場合はフォルダごと都合の良いところへ移動。
このあとは Windows をシャットダウンして再起動、通称「USB ブート」なる作業を行います。
https://www.kit-post.com/nec-bootmenu-procedure-1606
↑こちらの F2 キーを連打して云々・・・という行程をなんとなく読んで、なんとなく理解したら PC をシャットダウン。
以下シャットダウンしての作業になるので次のメッセージへ続く。スマホほかで確認して下さい。
linuxmint.comlinuxmint.com
Home - Linux Mint
Linux Mint is an elegant, easy to use, up to date and comfortable desktop operating system.
RufusRufus
Rufus: Create bootable USB drives the easy way
PCキッティング自動化サービスKitPost(きっとぽすと） - クローニング展開よりコスパ抜群！PCキッティング、パソコン初期設定自動化サービスはKitPost。マスターイメージ再作成やSysprep不要。機種変更、Windows10,Windows11対応。自社キッティング、PCリフレッシュ、アウトソーシング、外注による個別設定の手作業が不要の新キッティングサービス。モニター様、無料デモ体験受付中。
NECパソコン USBメモリやDVDから起動させる方法。ブートメニュー（BootMenu)を起動する方法
NECパソコンは種類によってブートメニュー起動方法が異なります。ノートや一体型の場合はF2、デスクトップの場合はF12でBIOS画面の終了画面（Exit)からBoot Overrideにて選択します。BootOverrideにてUSBメモリの選択ができない場合はUSBメモリブートが無効になっている可能性があります。



ドットインストールが終わったらその後は、私の机の上に『1週間でLPICの基礎が学べる本』というのがあるのでそれを持っていって下さい・・・もう持っていきました？ しばらく貸し出しますので、取り掛かってみて下さい。
LPIC（えるぴっく）という Linux 能力検定試験を目指すという内容ですが、試験は目指さなくとも入門には良い本かと思います。ドットインストールの有料枠を閲覧した後だとダブる部分も多いかと思いますが。
本はもしかしたら CentOS あたりに準拠して書かれていたかもしれません。
パッケージとかインストールとか、そういう文脈で yum（YellowdogUpdaterModified）とか dnf（DaNdifiedYum）とかいうコマンドが出てきたら apt（ApplicationPackagingTool） と読み替えて下さい。Ubuntu 準拠の記事でも apt-get と出てきたら（こいつは古いコマンドなので）同様に apt と:meow_bongo-keyboard:
他には本に出てくるコマンドで cal や rpm あたりで怒られるかもしれない。
masami@Artis-KOBAYASHI:~$ rpm
Command 'rpm' not found, but can be installed with:
sudo apt install rpm
こんな感じで「コマンドが見つからんけど、もしかして "sudo apt install rpm" でインストールできるんと違うか？」的な誘導メッセージが出てくるハズなのでこれに従って下され。


〇sudo su -
そして su コマンドに関して「Windows 上で Linux」の場合は罠がありまして。
通常は su - で root に変更できるのですが、「Windows 上で Linux」の場合は root ユーザのパスワードが設定されていないためにこのコマンドでは変更できないのです。というわけで sudo su - を試してみて下さい。こちらなら root に変更できます。
ログアウト　exit


★
Linux 学んで今後どうなるのか、そろそろ提案しなければと思い至り。
とりあえず今の本が終わったら
仮想マシン上に nginx（えんじんえっくす）で Web サーバをこさえてみる
そこに自分の作った WebPage をなんでも良いので流し込み、手持ちのスマホ等で他デバイスからも表示できることの体験
「TCP/IP とポート」という概念をなんとなくでも理解

実機上に ubuntu インストール、samba（さんば）サーバおっ建てて「みんなでアクセスできる共有ストレージ」を構築
学習用なので実際の運用はせずにさようなら、ですが
ついでに機材が「揃いそうな、そうでもないような」状況なので「諸々許せば」ですが
git（ぎっと）というツールの基本的な使い方と、docker（どっかー）という技術を学んでほしい
更にこれら↑を利用して WordPress 環境を構築
可能なら以前作ったテーマを取り込ませ、表示できることの確認
WordPress の裏で動いているデータベースにどんな情報が保存されているのか覗いてみる
その先は未定というか、ここまで来ると案件が待ってるかも・・・？
そんなコースを考えています:meow_bongo-keyboard:
これらを学んで・体験して何ができるようになるかというと、これまでの「決まったデータを表示するだけの WebPage」に対して「状況によって表示内容が刻々変化する WebPage の、その裏側」に手を伸ばせるようになります:meow_coffee:
実際に今の私が関わっている案件だと Vue/Node/Nuxt という HTML/CSS/JS がひとつのファイルにごった煮になったようなものと、ついでに python をこねくり回しながら「LINE ミニアプリ」を改修する・・・というものをやってまして。現在は数人のスタッフだけでやっているのですが、いずれ技術のありそうな利用者諸氏を巻き込んでいきたいという方向でいます。大谷さんも有望な新人としてチームにご招待（笑
そんな感じで、「サーバを建てる等、Windows ではできないような玄人的コンピュータの扱い」に手を伸ばせるようになってきます。
あるいは何か具体的な目標が欲しいということであれば Linux 技能検定試験（LinuC りなっく/LPIC えるぴっく）に挑んでみるというのもアリです。IT 系であれば求職時に一目置かれるでしょう。HTML/CSS 組めるだけなら（言葉は悪いですが）掃いて捨てるほどいますが、Linux 扱える人間となると急激に数が減るので。ただし、受験料がむっちゃ高価いです

-----------------------------------------------------------------
1週間でLPICの基礎が学べる本

ユーザー名　penguin
パスワード　password

〇ログアウト　Ctrl + D

〇シャットダウン
・ただちにシステムを停止　shutdown -h now
・ただちにシステムを再起動　shutdown -r now
・10分後にシステムを再起動　shutdown -r +10
・22:30にシステムを再起動　shutdown -r 22:30

〇画面の終了　qキー
・1画面下方向に進める
・Ctrl + B　1画面上方向に戻す

絶対パス　/ ルート
相対パス　/要らない

cd -　ひとつ前の作業ディレクトリに戻る

cd ..　ひとつ上のディレクトリへ移動

〇ハードリンクの作成
ln data/images/cat.jpg neko1.jpg
→ホームディレクトリにて、cat.jpgにneko1.jpgというハードリンクを
作成
ディレクトリのハードリンクは作成できない

〇ファイルの移動
mv myhosts /tmp
・ファイル名の変更
mv hosts hosts_mv

〇ファイルの圧縮
gzip services
services.gz ファイル名
※gzipはディレクトリの圧縮に対応していない
〇ファイルの解凍
gunzip services.gz

・圧縮する前のファイルを残したまま圧縮
gzip -c services > services.gz
・圧縮ファイルを残したまま解凍
gunzip -c services.gz > services

〇zipコマンド
※zipコマンドではディレクトリの圧縮も可
・ファイルの圧縮
zip services.zip services
・ディレクトリの圧縮
zip -r data.zip data
・解凍
unzip services.zip

〇圧縮アーカイブの作成
tar czvf archive.tar.gz archive

〇圧縮アーカイブの展開
tar xzvf archive.tar.gz

〇パスワードの設定
passwd penguin
・パスワードは8文字以上を指定


〇viエディタ
・起動
　vi testfile.txt
・保存して終了
　:wq もしくは ZZ
・保存しないで終了
　:q!
・保存
　:w
・別名で保存
　:w sample_new.txt

　コマンドモードで :qエンター
・挿入モードへ切り替え
　Iキーで先頭から
　iキーでカーソル位置から
　aキーでカーソルの右側の位置から
　escキーでコマンドモードに戻る

　文字列検索
　/検索ワード
　nキーで次の検索結果へ
　※ :nohで検索を解除できる。

〇リダイレクト（リダイレクション）
コマンドの標準出力を任意のファイルに切り替えることができる
$ date > today
※todayファイルが存在しない場合はファイルが新しく作られる
> を使ったリダイレクトは、ファイルの内容を上書きする

・追記リダイレクト
$ date >> today
>> はファイルの末尾に追記する

・標準エラー出力をファイルに出力
ls -l today nofile 2> stderr.txt

〇パイプ（|）
あるコマンドの実行結果を別のコマンドで処理する
$ history | less

〇メタキャラクタ（シェル）
シェルで特別な意味を持つ記号のことを、「メタキャラクタ」といいます。
*	0文字以上の任意の文字列
?	任意の1文字
[]	[]内の任意の1文字
/	メタキャラクタの打ち消し

ls *.txt　.txtの前が0文字以上のファイルを表示

ls ?.txt　.txtの前が1文字だけのファイルを表示

ls [ab]*.txt　aもしくはbから始まるファイルを表示

ls [3-5].txt　3,4,5から始まるファイルを表示

ls *[13]*ファイル名に1か3が含まれるファイルを表示


〇シェルスクリプト
実行する一連のコマンドを1つのファイルにまとめ、そのファイルを
呼び出すことで一括して実行

# の右側はコメント
しかし、1行目の #! はシェバンといい、どのシェルでコマンドを
実行するかを指定する役割がある
#!/bin/bash
/bin/bash、つまりbashで実行される

・シェルスクリプトの実行方法
$ bash diskmem.sh

引数の利用
hello.shファイル
#!/bin/bash

echo "Hello, $1"

上記の実行結果
$ bash hello.sh Penguin
Hello, Penguin!

〇終了ステータスの確認
$ echo $?
0
・コマンドの実行が成功なら0
・失敗なら0以外の数値
[penguin@centos7 ~]$ ls xxxx
ls: cannot access xxxx: No such file or directory
[penguin@centos7 ~]$ echo $?
2


〇正規表現
・正規表現の主なメタキャラクタ
.	任意の1文字にマッチする
*	直前にある文字の0回以上の繰り返しにマッチする
?	直前にある文字の0回または1回の繰り返しにマッチする（拡張）
+	直前にある文字の1回以上の繰り返しにマッチする（拡張）
[]	[]内の任意の1文字にマッチする
^	行頭にマッチする（最初にある時のみ有効）
$	行末にマッチする（最後にある時のみ有効）
\（バックスラッシュ）　直後に続くメタキャラクタの意味を解除する
※?および+は拡張正規表現。grepコマンドで利用するには-Eオプション
を指定する必要がある

〇正規表現の例
正規表現	説明
a.c	abc, a1cなどにマッチし、Abc,acなどにマッチしない
.*	0文字以上の文字列にマッチする
A-Z	大文字のアルファベット1文字にマッチする
[0-9][0-9]　2桁の数字にマッチする
^$	空行（改行のみの行）にマッチする
^#	行の中ではなく行頭の#という文字にマッチする
\.txt	.txtという文字列にマッチする
friends?　friendまたはfriendsにマッチする
123+	123,1233にマッチし12などにマッチしない


〇grepコマンド
テキストファイルの内容を検索し、指定した正規表現にマッチする
行があれば表示する
$ grep www /etc/services
デフォルトでは大文字、小文字を区別するが、-iオプション
を使うと大文字、小文字を区別しなくなる
$ grep -i www /etc/services

$ grep bash /etc/default/*
 /etc/defaultディレクトリ以下のファイルからbashが含まれる
行を表示

$ ps ax | grep bash
ほかのコマンドの実行結果の絞り込みにも利用できる


〇headコマンド
ファイルの先頭部分だけを表示する
デフォルトでは先頭10行を表示

$ head /etc/passwd

$ ps aux | head -5
psコマンドの出力の先頭5行を表示


〇tailコマンド
末尾部分だけを表示
デフォルトでは末尾10行を表示
$ tail /etc/services

$ ps aux | tail -5
psコマンドの出力の末尾5行だけを表示


〇sortコマンド
ファイルの内容を並び替え（ソート）して表示
デフォルトでは昇順（アルファベット順）にソートされる
$ sort sample

数字を数値としてソート
$ sort -n sample

-rオプション　逆順（降順）にソート
$ sort -nr sample
数値として降順でソート


〇nlコマンド
$ nl sample
ファイルに行番号を付けて表示


〇cut -d: -f1,3 /etc/passwd
/etc/passwdファイルの第1および第3フィールドを出力


〇wcコマンド
ファイルの行数、単語数、バイト数を表示
wc /etc/hosts

-lオプションを使うと、行数だけを表示
パイプを利用すると、ファイルの数を数えることができる
$ ls /etc | wc -l
/etcディレクトリ以下にあるファイルやディレクトリの数を調べる


〇rpm（dpkg）パッケージを管理

rpm オプション
-ivh パッケージファイル名	指定したパッケージをインストールする
-Uvh パッケージファイル名	指定したパッケージをアップグレードする
-e パッケージ名			指定したパッケージをアンインストールする
-q パッケージ名			指定したパッケージがインストールされているか確認する
-qa				インストール済みパッケージを一覧表示する
-qi パッケージ名		指定したパッケージの説明を表示する
※パッケージのインストール、アップグレード、アンインストールにはrootユーザーの権限が必要


〇yum（Yellowdog Updater Modified）（ubuntsはapt）

RPM形式のパッケージ管理システム
パッケージをインターネット上で検索できる
必要なパッケージをインターネット上から自動的にダウンロードできる

yumコマンドの主なサブコマンド
update			システム全体をアップデートする
install パッケージ名	指定したパッケージをインストール
remove パッケージ名	指定したパッケージをアンインストール
update パッケージ名	指定したパッケージをアップデート
list			パッケージを一覧表示（未インストールも含む）
info パッケージ名	指定したパッケージの情報を表示する
search "キーワード"	指定したキーワードでパッケージを検索する

# install httpd
httpdパッケージをインストール

$ yum info nginx
nginxパッケージの情報を表示

$ yum search ruby
キーワードrubyでパッケージを検索

# yum update
システムをアップデートする


〇マウント

# fdisk /dev/sdb
パーティション作成

# mkfs -t ext4 /dev/sda5
ext4ファイルシステムの作成

# mount /dev/sr0 /media/dvdrom
mount デバイスファイル マウントポイント


〇プロセスの終了
シグナルを送る
シグナルID	シグナル名	動作
9		KILL		強制終了
15		TERM		終了（デフォルト）
18		CONT		再開
19		STOPs		一時停止


・プロセスの終了
$ kill 28000
$ kill -15 28000
$ kill -s TERM 28000
※KILLシグナルを送るのは、TERMシグナルが有効にならなかった場合だけ
　プロセスを強制終了すると、不具合が残る可能性がある

$ killall -15 vim
vimというプロセス名のプロセスを終了


〇プライベートアドレス
・10.0.0.0～10.255.255.255
・172.16.0.0～172.31.255.255
・192.168.0.0～192.168.255.255

〇ポート番号
20	FTPのデータ転送
21	FTPの制御情報
22	SSH（Secure-Shell）接続
23	Telnet接続
25	電子メール送信（SMTP）
53	DNS
80	Web(HTTP)
110	電子メール受信(POP3)
443	Web(HTTPS)


〇/etc/hostname　ファイルで、ホスト名（コンピュータ名）を設定
※ホスト名を変更した場合は、システムを再起動する必要がある

〇ホスト名の確認
$ hostname

〇ネットワークインターフェースの情報確認
$ ip address show

・ネットワークインターフェースenp0s3の情報を確認
ifconfig enp0s3


〇ポートの確認
・ポートが開いているかの確認
$ ss -atl

Peer Address:Port
*:*
であれば開いている

$ netstat -atl
Foreign Address
[::]:*
であれば開いている

〇ルーティングテーブルの確認
$ route
or
$ ip route show


〇sshコマンド
sshでの接続
$ ssh penguin@10.0.2.15


〇pingコマンド
死活監視（コンピュータが動作しているか、エラーを起こしてダウンしているか、といったコンピュータの動作状況を監視すること）ができる
$ ping 10.0.2.15

終了　Ctrl + C

※IPv6のネットワーク環境では、pingの代わりにping6コマンドを使う


〇主なログファイル
/var/log/messages	主要なログファイル
/var/log/syslog		主要なログファイル（Ubuntu、Debian/GNU Linux）
/var/log/maillog	メール送受信のログファイル
/var/log/secure		認証関連のログファイル
※多くのログファイルはテキストファイルなので、lessで閲覧したり、
grepで特定のキーワードで検索したりできる


〇システム起動時のメッセージを確認
$ dmesg

〇最近ログインしたユーザーを確認
$ last

〇ログイン中のユーザーを確認
$ who

〇ログイン中のユーザーと実行中のコマンド、システム情報を確認
$ w








export EDITOR=/usr/bin/vim




〇CentOS

80番ポート確認
firewall-cmd --list-all


###起動
# systemctl start nginx


###起動の確認
# systemctl status nginx


# vi /etc/nginx/conf.d/default.conf

# systemctl start nginx


http://127.0.0.1:80

http://127.0.0.1:8080

http://10.0.2.15:80

http://10.0.2.15:8080


サービスの自動起動は設定されています


-----------------------------------------------------------------
〇tera term

2222
「Ctrl＋Insert」でコピー
「Shift＋Insert」がペースト
・終了方法 作業が終わり、ウィンドウを閉じる場合は「exit」コマンドを入力して終了します。
-----------------------------------------------------------------

UNIX

コマンドが打たれた状態でエンターキーとするとこのコマンドを実行しますが、そうではなくて、やっぱり次のコマンドを打ちたいという場合、 Control キーを押しながら c キーを押せばこのコマンドを実行せずに新しいプロンプトに移ることができます。

途中まで打ったコマンドをクリアしたい場合、 Control キーを押しながら、 u キーを押せばクリアすることができます。

画面全体をいったんクリアしたいという場合は clear エンターキーとするか、 Control キーを押しながら l キーでも OK

pwd 今いる場所（カレントディレクトリ）の表示
tab 2回　補完
cd チェンジディレクトリ
ls リスト　ls mysite/　mysiteの中を見る
ls -a 隠しファイル（水色はフォルダ（ディレクトリ））
ls -l 詳細

$ ls -ld　ディレクトリに含まれているものの情報ではなく、ディレクトリ自体の情報を表示する

man -ls lsについての詳細なマニュアル表示（スペースで次ページ、qで終了）

ワイルドカード
→特定の項目だけ表示。

cp /etc/services .　/etc/servicesを現在のディレクトリ（.）にコピー

cp　デフォルトだとファイルだけが対象になる　

cp -r mysite/ myprofile　サブディレクトリの中身まで一気にコピーするには再帰的を意味する
 recursive の -r オプションを使う

☆相対パス
コピー元 コピー先
sudo cp -r ./wp ./wp2

touch index.html　ファイル作成

touch mysite/css/style.css　深い階層にファイルを作成

mkdir mysite　mkdir　フォルダ作成

mkdir -p myapp/css/common　-pオプションで深い階層までフォルダを作成できる

mv index.html mysite/  index.htmlをmysiteフォルダに移動

mv mysite myprofile　mysiteフォルダの名前をmyprofileに変更

rm myprofile/index.html　myprofileフォルダの中のindex.htmlファイルを削除

rm * 全てを削除

※フォルダの中を空にしないとフォルダを削除できない
rmdir myprofile/　myprofileフォルダの削除
rm -r myprofile　フォルダの中身も削除　※とても危険なコマンドなので使用は十分注意

ln -s myapp/css/common/ mycommon　myapp/css/common/のシンボリックリンク
（ショートカット）を作成
シンボリックリンクはディレクトリだけではなくて、ファイルにも使える



cat services　servicesの中身を見る

ページャー
more services　servicesの中身をページごとに表示　次ページに進むにはスペースキー　終了 q
less services　moreと同様　/に続けて検索したい単語を入力するとその箇所まで移動する　nextのnキーで
次の検索結果まで飛ぶ

wc(word count) services　行数や単語数などを教えてくれます。 行数 単語数 バイト数 ファイル名
　※日本語のテキストの場合、英語と違って単語の区切りが分かりづらいので、正確な単語数が出てこない点にも注意しておきましょう。

wc -l services　行数だけを表示

先頭の 3 行だったら head -n 3 ファイル名とするか、もしくは単に -3
tail に関しても最後の 3 行だけ見たかったら、 tail -3 ファイル名としてあげれば OK です。

grep 'backup' services　backup という単語が services に含まれるかどうか検索。

history　コマンドの履歴を見ることができます。↑キーか!番号
直前のコマンドは !! でも OK
!-2 とすると、ふたつ前のコマンドを実行することができます
直前のコマンドの引数だけを使いたい場合
ls etc として中身を確認したあとにそのディレクトリに移動したかったら、 cd etc と打ってもいいのですが、直前のコマンドに渡した最後の引数は !$ で表現できるので、cd !$でも OK

! としたあとに、たとえば pw とすると、 pw から始まる直近のコマンドを実行することができます。
記憶があやふやな場合は最後に :p をつけて実行せずにそのコマンドの表示だけをすることもできます。
!pw:p

Ctrl+R 先頭の何文字か　コマンドの検索ができる　エンターで実行
検索を中断したい場合は Control + c


●ハードリンクとシンボリックリンク
〇ハードリンク
ファイルの実体（データ）に直接リンクします。
同じファイルを別の名前でアクセス可能にする。
特徴:
・元のファイルが削除されても、リンクされたファイルは利用可能。
・同じデータを参照しているため、ディスクスペースは増えません。
・同じファイルシステム内でのみ作成可能。
〇シンボリックリンク（ソフトリンク）
・**ファイルやディレクトリへの「ショートカット」**のようなもの。
特徴:
・リンク元のパスを参照するだけで、実体データを直接指しません。
・元のファイルが削除されると、リンクは壊れて使えなくなります（壊れたリンク）。
☆異なるファイルシステム間でも作成可能。

〇パーミッション

アクセス権限　ls -lで表示された内容の

-rw-r--r--

最初の 1 文字はファイルの種別を表していて、
・ - だったら通常のファイル
・ d だったらディレクトリ、
・l だったらシンボリックリンク

-　通常ファイル
d　ディレクトリ
l　リンクファイル
c　特殊ファイル（キャラクタデバイスファイル）
b　特殊ファイル（ブロックデバイスファイル）

次に続く 9 文字ですが、 3 文字ずつに分かれていて、
・最初の 3 文字は［所有するユーザーのアクセス権］
・次の 3 文字は［所有するグループのアクセス権］
・そして最後の 3 文字は［その他のユーザーのアクセス権］になります。

またこの 3 文字ですが、通常は先頭から rwx か rw- で表示されます。

・r は read つまり読み取り可能
・w は write 書き込み可能、そして
・x は execute つまり実行可能という意味になります。

ディレクトリの場合、実行できるものではないので、ここが x だったら開くことができるという意味になります。

チェンジモードコマンド
chmod a=rwxrwxrwx index.html
chmod g=rw,o=r index.html
chmod g+x,o-r index.html
chmod 666 index.html


モード(数字)	モード(アルファベット)	権限
4	r	読み取り
2	w	書き込み
1	x	実行

変更対象　意味
u	ユーザー
g	グループ
o	その他
a	すべて

r 2^2=4
w 2^1=2
x 2^0=1


書き込み権（w）

ファイルに書き込み権が設定されていると、ファイルの内容を変更することができる。ディレクトリに書き込み権が設定されていると、そのディレクトリ内でファイル作成や削除ができる。※ファイルに対するアクセス権がなくても、ファイルを削除できてしまう点に注意

実行権（x）
ファイルに実行権が設定されていると、ファイルをプログラムとして実行することができる。ディレクトリに実行権が設定されていると、そのディレクトリ内のファイルにアクセスしたりすることができる。



一時的にルートユーザーの権限を使いたかった場合、 sudo というコマンドを使います。
その上で、実行したいコマンドを書く

vi を起動するには vi と打って、作成や編集をしたいファイル名を入れてあげれば OK です。
vi hello
起動すると、コマンドモードになっています
編集コマンドが起動してしまうので、落ち着いて insert の i を押してあげてください。
そうすると編集モードになって左下に I と出ます。
編集モードにいるかどうかはこの I で判断するようにしてください。
編集モードから抜けるには esc キーを押してあげます。
viを終了するにはコマンドモードにいる必要があるので、ここに I がないことを確認しつつ、落ち着いて :q エンターキーと打てば OK です。
編集モードで
#!/bin/ash
先頭の 2 文字はシェバンと呼ばれていて、これがあったら次に続くプログラムで実行しなさいよ、という意味になります。
空白を含む文字列はシングルクオーテーションで囲む点にも注意
I が消えたので、コマンドモードにいます。
そのあとに落ち着いて :wq エンターキーとしましょう。（保存して終了）

保存せずにとにかく終了したかったとしましょう。
 I がないので、コマンドモードになっていることを確認したあとに、 :q! としてください。
そうすると、保存せずに強制終了してくれます。

コマンドをどこから検索しているかですが、環境変数という仕組みで管理されていて、 echo $PATH で見ることができます。
$PATH という環境変数があって、シェルはそこからコマンドを探しているのだよ、という仕組みだけを理解するようにしておいてください。

実行しようとしているコマンドがどこのディレクトリから呼び出されているかは which コマンドで調べることができます。
実行したコマンドが期待通りの動作をしない場合、違うパスのコマンドを実行していたりするので、そうしたときは which で調べてあげるといいでしょう。
今回設定したこちらの $PATH ですが、実はログアウトすると、こちらが元に戻ってしまいます。
ログアウトしてもそうならないように設定もできるのですが、慣れないうちはあまりいじらない方が良いでしょう。

リダイレクション
ファイルの中身として保存したかった場合、リダイレクションというのですが、 > を使ってあげれば、表示するのではなくてファイルに書き込んでくれるはずです。
$ echo 'date' > commands.txt
なお、このリダイレクションはファイルを上書きするので、そのあとに cal を commands.txt にリダイレクションした場合、 commands.txt の中身は cal で上書きされる
上書きではなくて、末尾に追記する方法もあって、その場合は >> を使ってあげます。
$ echo 'date' >> commands.txt
cal も date もシェルコマンドなので、この環境でシェルとして使っている /bin/ash というコマンドに流し込んで実行したい場合、今度は < を使ってこのようにファイルの内容を流し込んであげます。
$ /bin/ash < commands.txt
そうすると、ここに書かれた cal と date が実行される

$ ls -l /etc/ | grep 'sudo'　sudoを含むファイルを表示

$ ls -l /etc/ | grep 'sudo' | wc -l　sudoを含むファイルの数を表示

リダイレクションと組み合わせることもできるので、たとえば results.txt というファイルに結果を書き出したかったらこのようにしてあげます。
ls -l /etc/ | grep 'sudo' | wc -l >results.txt

ブレース展開
$ echo {1..10}{a..g}

$ mkdir test && cd test　testディレクトリを作成。成功したらtestディレクトリに移動

mkdir app{1..5} としてあげると、 app1 から app5 までが作られる

app{1..5}/test{1..3}{.jpg,.png,.gif}
これを実行してあげると、 app1 から 5 の中に test1 から test3 でそれぞれの拡張子がついたファイルができるはずです。

それから、この中から .jpg と .gif だけを削除したいなら、同じようにブレース展開が使えて、 rm app{1..5}/test{1..3}{.jpg,.gif} だけ削除したいと書いてあげましょう。

$ touch test/app{1..5}/app{1..3}{.jpg,.png,.gif}
app1～5の中にapp1～3の拡張子が.jpg,.png,.gifのファイルを作成

$ find test -name 'app3.png'　名前で検索

$ find test -name 'app1*'　ワイルドカードでの検索
（名前がapp1で始まるものの検索）

$ find test -name 'app1*' -type f　ワイルドカードでファイルだけ検索

$ find test -name 'app1*' -type d　ワイルドカードでディレクトリだけ検索
-----------------------------------------------------------------

AOS は Animate On Scroll の略で、Web ページでよく見かける、スクロールしていくとふわっと要素が現れるようなアニメーション効果のことになります。

data-aos-anchor-placement="top-top"
この要素の上端が画面の上端まで来た時にアニメーションが開始される

data-aos-delay="600" // アニメーションの開始を遅らせる


<a href="#" class="to-top" data-aos="fade-up" data-aos-anchor="#footer" data-aos-offset="0">先頭へ</a>
// フッターが0pxでも表示された場合、この要素を表示する

aos 独自のアニメーション
[data-aos="my-animation"] {
  opacity: 0;
  transition: opacity 300ms, transform 300ms;
}

[data-aos="my-animation"].aos-animate {
  opacity: 1;
  transform: rotate(360deg);
}
-----------------------------------------------------------------
〇Linuxエンジニアの仕事としては、Linuxを用いたインフラ環境の提案や設計、構築、保守運用などが挙げられます。


バックエンドエンジニアは、Python、Ruby、PHPなどのプログラミング言語やスクリプト言語を使用します。
彼らは、サイトの安全性、データの管理方法などを重視します。


バックエンドエンジニアの仕事内容
バックエンドエンジニアの仕事内容は場合によって少しずつ異なりますが、一般的には次のような仕事を担当します。

ウェブサイトやウェブアプリケーションのバックエンドインフラの開発
既存のバックエンドの保守
トラブルシューティングとバグの修正
ホスティング環境の管理
品質保証（QA）テスト
クライアント側ウェブアプリケーションへの効率的なデータ転送のためにフロントエンドエンジニアと協働
顧客や製品管理、マーケティング、営業、カスタマーサービスなどの部門との連携によるソリューションの開発
アーキテクチャ、プロセス、システムに関するドキュメントの更新


APIとは「アプリケーション・プログラミング・インターフェース（Application Programming Interface）」の略称です。一言で表すと、ソフトウェアやプログラム、Webサービスの間をつなぐインターフェースのことを指します。

-----------------------------------------------------------------
html

HTML5においては
「description list(dl）= 説明リスト」
「description term(dt）= 説明する言葉」
「definition / description(dd）= 定義文もしくは説明文」
という形でdt要素をdd要素で説明する「記述リスト」に変更されました。


// アコーディオンのような動き
  <details open>
    <summary>質問です</summary>
    回答です。回答です。回答です。回答です。回答です。回答です。回答です。回答です。回答です。回答です。回答です。回答です。回答です。回答です。
  </details>


カスタムデータ属性
data- から始まっていれば独自の属性を付けられる
こちらの値にアクセスするには、同名のプロパティである data-xxx とすれば良いかと思いきや、クラス属性とカスタムデータ属性だけは例外的に違う書き方になります。
→dataset.xxx
　とすればよい


でそれを実現しているとのことですが、カスタム属性をつけてあるのは a なのに
どうしてそれがついていない section に active クラスがつくのか理解出来ません。

この紐づけはaタグのdata-idとsectionタグのIDによって行われています。

clickedItem.dataset.id で取得した a タグの data-id を document.getElementById() の引数に ID の名前として渡すことによって、その data-id と同名の ID をもつ section タグを取得し、それに active クラスを付与しているので、a タグではなく section タグに active クラスがつきます。



-----------------------------------------------------------------
CSS

dl > div // dl直下のdivという意味

div>p {
color:red;
}
というCSSを書き、HTMLを以下に示します。

<div>

<p>この部分は適用される</p>

<a>

<p>この部分は適用されない</p>

</a>

</div>

divの直下セレクタである一個目のpには適用されるが、二個目のpにはdivとの間にaというタグがあるためにスタイルが適用されない。

+プラス

隣接している唯一の弟セレクタ
h2 + p{margin-top: 0;}
兄が「h2」で、そのすぐ下の「p」のように、隣接しているひとつの弟を示します。

h2とpのあいだに他のタグがある場合、pにCSSは効きません。

またh2のpの次のpにも効きません。


// 先頭に文章を追加
dd::before {
  content: 'A. ';
}

// 要素の選択を無効にする
  user-select: none;


.content {
  visibility: hidden;//文書のレイアウトを変更することなく要素を非表示。
  opacity: 0;
}
.content:hover {
  visibility: visible;//文書のレイアウトを変更することなく要素を表示。
  opacity: 1;
  transition: .3s;//アニメーションの速度を指定。
}

------------------------------------------------------------------
★要素の重なり順
基本、下に書かれた要素が上にくる
positionプロパティの初期値であるstaticではz-indexを指定できません。言い換えるとpositionで何も指定していない限り、z-indexは使えません。

transition: transform 0.4s; // 遷移の速さ設定


// 左右中央に配置したいのですが、絶対配置の場合は left: 0; 、 right: 0; としたあとに左右の margin を auto にすることで中央揃えにできる
{
  background: #fff;
  width: 300px;
  padding: 20px;
  border-radius: 4px;
J
  left: 0;
  right: 0;
  margin: 0 auto;
}

// 画面いっぱいに拡げる
  position: fixed;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;



margin-left: auto; // 右寄せ

list-style-type: none; // ・消す

トランジション (transition) は、要素の 2 つの状態間の変化を定義するためのものです。
transitionで抑えたいポイントは
スタイルの状態変化は双方向であり、行ったり来たりの変化が可能 という点です。
つまり、もとに戻るアニメーションもできるということです。

*クラス付与前（変化前）のcssのブロックに書く

* display: none; には使えない


visibility
クリックOK
フェードインOK
しかし、フェードアウトは「ふわっと消えない」


下から上へふわっと順番に出現
.overlay li {
  margin-top: 24px;
  opacity: 0;
  transform: translateY(16px); // transform = 変身
  transition: opacity .3s, transform .3s; // transition = 遷移
}

.overlay.show li {
  opacity: 1;
  transform: none;
}

.overlay.show li:nth-child(1) {
  transition-delay: .1s;
}

.overlay.show li:nth-



(2) {
  transition-delay: .2s;
}

.overlay.show li:nth-child(3) {
  transition-delay: .3s;
}


  pointer-events: none;
→pointer 系のイベントは無効化されるので、その下の要素が選択できるようになる。
　初期値は : auto;

-----------------------------------------------------------------
// dl要素はdt要素（用語）,dd要素（その用語に対する説明）をともなう記述型リストです。
「description list(dl）= 説明リスト」「description term(dt）= 説明する言葉」「definition / description(dd）= 定義文もしくは説明文」

// マテリアル アイコン
<link href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet">

// stylesheetの読み込みを先に行う！

// body内に下記記載　menuをアイコンネームに書き換えれば流用可能
  <span class="material-icons">menu</span>


// outline プロパティは border と違って、領域の幅や高さに影響を与えないので、他の要素がずれることがありません。
　表示領域を確認する時に便利

// 高さを 100% にする時は、親要素のほうにもきちんと高さを指定する必要がある。


// flex アイテムはデフォルトでは等しく縮むようになっている
　→min-width: 100%;　とすればよい
　→領域からはみ出ている分は親要素に　overflow: hidden;　を指定で非表示となる

// &laquo; left angle quote
// &raquo; right angle quote

// 要素名.style.transform
　→要素にtransformのstyleを適用
　　ul.style.transform = 'translateX(-200px)';

// 上下中央揃え
　top: 50%; // これだけだと上端が50％にくるので
  transform: translateY(-50%); // ←で要素の高さの半分だけ戻す

// document → Webページを構成するHTML要素

// const slides = ul.children;
　→ulの子要素をすべて取得

// slides[0].getBoundingClientRect()
　↑の要素に関する情報を取得
　slides[0].getBoundingClientRect().width;　ではwidthを取得


スライドの幅を取得する際に、
最初の li 要素だけではなく、一旦全ての li 要素を取得するのは
この後の操作で slides.length を使わなければならない場面があるので
前もってここで slides を宣言しているという認識でよろしいでしょうか。
他に何か理由があれば教えてください。

 スタッフ
はい、そのとおりです。

スライド 1 枚の幅を取得するだけなら要素をひとつだけ取得すれば事足りますが
最終的にはスライド全体の件数を使って処理を行うため
最初から全体を取得して、幅の計算にはその 1 件目だけを使っています。


// 変数や式を埋め込むためには、テンプレートリテラル内で使いたい式や変数を${}で囲みます。
これをプレースホルダといいます。
console.log(`Hello ${person}`);

●カルーセルの循環
「carousel infinite loop」あたりで検索すれば実装方法がでてくるはずです。自分で組み上げてみたい場合は以下のYouTubeをもとにやってみてください。

https://www.youtube.com/watch?v=0YMntQg-WIk


for 文の中で const を使っても値の再代入にはならないのですか？
→これは再代入ではありません。

{ } のブロック内で定義された定数は
そのブロックのスコープだけで有効です。

for によってループ処理が行われる場合
繰り返しのそれぞれでブロック内の処理が行われるため
たとえば 1 回目のブロックと 2 回目のブロックは別のスコープを持っています。

ですから 1 回目のループで const によって定義された button と
2 回目のループで定義される button はまったく別のものです。

// 右寄せ
//親要素
header {
  display: flex;
  padding: 0 16px;
}
// 子要素
.sp-menu {
  margin-left: auto;
}

// インライン要素
<a>
<br>
<button>
<span>
<iframe>
<img>
<input>
<label>
<script>
<strong>
<textarea>
<tt>
など
display: block; としてあげると、 width を設定できる（display: inline-block; でも可）


// ブロック要素
<div>
<dl>
<form>
<h1>～<h6>
<hr>
<ol>
<ul>
<p>
<pre>
<table>
など




//マウスホバーしたときポインターにする
cursor: pointer;

//透明な要素の下の要素が選択できないとき
pointer-events: none;

コメントアウト
一行　//
複数行　*/ */

html
<!-- <td>東京都渋谷区桜丘町99-9 West Building 3F</td> -->


記事の抜粋
<?php the_excerpt(); ?>


透明
transparent

透明度指定
background: rgba(0, 0, 0, 0.4);

---------------------------------------------------------------------
JS
https://www.javadrive.jp/javascript/
272P


最初は消えているので変化前のスタイルをつけることができません。
使えないので、 keyframes によるアニメーションを使います。


モーダルウィンドウ
{
  const open = document.getElementById('open');
  const mask = document.getElementById('mask');
  const modal = document.getElementById('modal');
  const close = document.getElementById('close');

  open.addEventListener('click', () => { // イベントリスナーの追加
    modal.classList.remove('hidden'); // クラスを削除
    mask.classList.remove('hidden');
  });
  close.addEventListener('click', () => {
    modal.classList.add('hidden'); // クラスを付与
    mask.classList.add('hidden');
  });
  mask.addEventListener('click', () => {
    close.click(); // 一般的な記述方法【 対象要素.click( 関数 ) 】
  });
}


ハンバーガーメニュー
{
  const open = document.getElementById('open');
  const overlay = document.querySelector('.overlay'); // クラスの場合
  const close = document.getElementById('close');

  open.addEventListener('click', () => {
    overlay.classList.add('show');
    open.classList.add('hide');
  });

  close.addEventListener('click', () => {
    overlay.classList.remove('show');
    open.classList.remove('hide');
  });
}


アコーディオンメニュー
{
  const dts = document.querySelectorAll('dt');

  dts.forEach(dt => {
    dt.addEventListener('click', () => {
      dt.parentNode.classList.toggle('appear');
      
      dts.forEach(el => {
        if (dt !== el) {
          el.parentNode.classList.remove('appear');
        }
      });
    });
  });
}


タブメニュー
{
  const menuItems = document.querySelectorAll('.menu li a');
  const contents = document.querySelectorAll('.content');

  menuItems.forEach(clickedItem => {
    clickedItem.addEventListener('click', e => {　// e = イベント
      e.preventDefault();

      menuItems.forEach(item => {
        item.classList.remove('active');
      })

      clickedItem.classList.add('active');

      contents.forEach(content => {
        content.classList.remove('active');
      });

      document.getElementById(clickedItem.dataset.id).classList.add('active');
    });
  });
}



クリックした要素の親要素に appear クラスを付けたあとで、いったんすべての dt 要素を調べてあげて、クリックされた dt 要素以外を閉じる。


=== // ～と等しい
!== // ～と等しくない


+=とは プログラミングで出てくる演算子のひとつ であり 「演算子の左側の値と右側の値を足し算して、その結果を左側に代入してね～」意味する

下記は一緒
price += 1;
price++;


// カルーセル
{
  const next = document.getElementById('next');
  const prev = document.getElementById('prev');
  const ul = document.querySelector('ul');
  const slides = ul.children;
  const dots = [];
  let currentIndex = 0;

  function updateButtons() {
    prev.classList.remove('hidden');
    next.classList.remove('hidden');

    if (currentIndex === 0) {
      prev.classList.add('hidden');
    }
    if (currentIndex === slides.length -1) {
      next.classList.add('hidden');
    }
  }

  function moveSlides() {
    const slideWidth = slides[0].getBoundingClientRect().width;
    ul.style.transform = `translateX(${-1 * slideWidth * currentIndex}px)`;
  }

  function setupDots() {
    for (let i = 0; i < slides.length; i++) {
      const button = document.createElement('button');
      button.addEventListener('click', () => {
        currentIndex = i;
        updateDots();
        updateButtons();
        moveSlides();
      });
      dots.push(button);
      document.querySelector('nav').appendChild(button);
    }

    dots[0].classList.add('current');
  }

  function updateDots() {
    dots.forEach(dot => {
      dot.classList.remove('current');
    });
    dots[currentIndex].classList.add('current');
  }

  updateButtons();
  setupDots();

  next.addEventListener('click', () => {
    currentIndex++;
    updateButtons();
    updateDots();
    moveSlides();
  });

  prev.addEventListener('click', () => {
    currentIndex--;
    updateButtons();
    updateDots();
    moveSlides();
  });

  window.addEventListener('resize', () => {
    moveSlides();
  });
}



// 文字列連結
console.log('My name is ' + fname + ' ' + lname + ', call me ' + fname + '!');

// テンプレートリテラル
console.log(`My name is ${fname} ${lname}, call me ${fname}!`)

JavaScript では + 記号を使っていてどちらかが文字列だった場合、もう一つが文字列に変換されるので、50 が文字列になってこちらの文字列と連結されたため、文字列の 5020 になる

prompt では、実は入力された値はなんであろうが、必ず文字列になるという仕様になっている
→Number() //回避策
console.log(Number(n) + 10);

順次処理 // 上から下へ順次処理を行う

条件分岐
if文
if (score >= 90) {
  console.log('A!');　// ここはセミコロン必要
} // if文は文末のセミコロン不要


if (score >= 90) {
  console.log('A!');
} else if (score >= 70) {
  console.log('B!');
} else {
  console.log('C!');
}


// switch文
今回みたこちらの条件分岐は頑張れば if else でも書いていくことができますが、このように取りうる値が決まっている場合、switch の方がすっきり書けたりもするので使いこなせるようにしておくと良いでしょう。

const color = prompt('color?');

switch (color) {
  case 'red':
    console.log('Stop!');
    break;
  case 'yellow':
    console.log('Slow down!');
    break;
  case 'blue':
  case 'green':
    console.log('Go!');
    break;
  default:
    console.log('Wrong color');
}


// 反復処理
ループ
for文

for (let i = 0; i < 3; i++) {
  console.log('Hello');
}


// forの入れ子
const rate = 1.1;

for (let price = 150; price <= 160; price++) {
  console.log(`Price: ${price}`);
  for (let amount = 120; amount <= 140; amount+=10) {
    console.log(price * amount * rate);
  }
}

// while文
let command = Number(prompt('Menu 1, 2, 3 or 0 to exit'));

while (command !== 0) {
  console.log(`Menu ${command} prossesed.`);
  command = Number(prompt('Menu 1, 2, 3 or 0 to exit'));
}


// do...while文

let command;

do {
  command = Number(prompt('Menu 1, 2, 3 or 0 to exit'));
  if (command === 0) {
    console.log('Exited');
  } else {
    console.log(`Menu ${command} processed.`)
  }
} while (command !== 0);

// do...while については最後にセミコロンが必要なので注意。


break、continue は、for だけでなく、while や、do...while でも使うことができます。

break の方は反復処理全体から抜けるための命令。

continue の方は、反復処理の途中でそれ以降の処理をスキップして、次の反復処理に移るための命令なので、混同しないようにしておきましょう。

★とりあえずよく使われる for を試してみて、うまくいかなかったら while それでもうまくいかなかったら do...while という使い分けかたでも最初は良いでしょう。


// 条件（3項）演算子

score > 80 ? 'A' : 'B' // score >80を満たしたらA、満たさなかったらB
                   ↓
const result = score > 80 ? 'A' : 'B'
最終的に 1 つの値になるので、このように定数や変数に代入して使うことができます。


// 論理演算子
&& // かつ
|| // または
!A // Aではない


// ローカルスコープ
{

}
// 定数がローカルスコープになるのはそのブロック内で宣言をした時だけです。
// 従って、ここで宣言をせずに、単に x = 20 とした場合、これはローカルスコープにならずにグローバルスコープの x を参照します。

グローバルスコープ
{}に入っていない

let x = 10;

{
  // let x = 20;
  x = 20;
  console.log(x); // 20
}

console.log(x); // 20

------------------------------------------------------------------
関数
{
  function double(num) { // 仮引数
    return num *2;
  }

  console.log(double(10)); // 実引数
  console.log(double(4) * 3); // 実引数
}


関数は定義された時点では何も実行しませんが、関数が呼び出されるたびに関数定義内に処理が移って、返り値が関数を呼び出した箇所に帰って置き換わる、というイメージを持っておくといいでしょう。

NaN // Not a Number


JavaScript では、関数で return を書かなかった場合、実は undefined という特殊な値を return することになっている。

引数のデフォルト値を使うことも可能
function calculateTotal(price, amount, rate = 1.1)


早期リターン→return を使って特殊なケースを先にふるい落とすテクニック
{
  function calculateTotal(price, amount, rate = 1.1) {
    //   if (amount >= 100) {
    //     return price * amount;
    //   } else {
    //     return price * amount * rate;
    //   }

    // 早期リターン
    if (amount >= 100) {
      return price * amount;
    }
    return price * amount * rate;
  }

  console.log(calculateTotal(100, 100));
  console.log(calculateTotal(1000, 10));
}


関数の引数はその関数の中でのみ参照できるという点に注意しておきましょう。

{
  // 関数宣言
  // function double(num) {
  //   return num * 2;
  // }
関数宣言はコードのどこに書いても実行時にはコードの先頭に書いたことになる


  // 関数式（無名関数）
  // const double = function(num) {
  //   return num * 2;
  // };

  // アロー関数式　★基本
  const double = (num) => {
    return num * 2;
  };　// 
  
 // 引数が 1 つの時は、この丸括弧を省略することもできるので、このように書いても OK
　const double = num => {
    return num * 2;
  };

  // 関数式は、定数や変数に値を代入しているのと同じ構文なので、末尾に ; が必要な点に注意しておきましょう


  // return で返す処理が 1 行だけの場合、もっと短く書くことができて、その場合は、こちらの {} と return を省略して、このように書いても OK
  const double = num => num * 2;


// 関数の引数で関数を渡す　アロー関数式

{
  const calc = (num, func) => {
    return func(num);
  };

  console.log(calc(20, 
    (value) => { return value * 2; }
  )
);
}


-----------------------------------------------------------------
データ構造

// 配列
{
  const scores = [
    70, 
    90, 
    80, 
    85,
  ];

  
  console.log(scores[2]); // 80
  console.log(scores.length); // 4
  scores[1] = 95;
  console.log(scores); // [70, 95, 80, 85]
}

length = 要素の個数


大抵の場合、配列は const で宣言するので、現時点ではそのように覚えてしまう


// 配列をfor文で繰り返し表示する
{
  const scores = [
    70, 
    90, 
    80, 
    85,
  ];

  // console.log(scores[0]);
  // console.log(scores[0]);
  // console.log(scores[0]);
  // console.log(scores[0]);

  scores.push(77, 88);

  // for (let i = 0; i < scores.length; i++) {
  //   console.log(scores[i]);
  // }

  scores.forEach((score, index) => {
    console.log(`${index}: ${score}`);
  });　
}
こちらのアロー関数式には 2 つ引数を渡すこともできて、1 つめの引数にはこれまで見てきたように配列の要素が、そして 2 つめの引数にはその要素が何番目かのインデックスがセットされていきます。

forEach() と for() の違いとしては、for() では何らかの条件でループから抜けるために break を使う事ができましたが、forEach() では途中でループを抜ける事ができない、という違いがあります。


// オブジェクト
{
  const scores = {
    math: 80, 
    english: 90, 
  };

  scores.physics = 70;　// オブジェクトの追加
  delete scores.english; // オブジェクトの削除
  console.log(scores);
}

オブジェクトに対して直接 forEach() を使うことはできません。
そこで、一旦オブジェクトを配列に変換してから forEach() を使うというテクニックがよく使われます。
どうするかというと、少し変わっているのですが、Object.entries(scores) とすると、それぞれのプロパティを配列にして、さらにそれらをまとめた配列を取得する事ができます。
{
  const scores = {
    math: 80, 
    english: 90, 
  };

  const entries = Object.entries(scores);
  // console.log(entries);
  entries.forEach((prop) => {
    console.log(prop);
    console.log(`${prop[0]}: ${prop[1]}`);
  });
}

-----------------------------------------------------------------
console.log('It\'s a pen.');　//"'"の表現はその直前にバックスラッシュ
console.log("It's a pen.");　//これでもOK

JavaScriptで改行コードを追加するには？
JavaScript入門】文字列を改行する方法(改行コード/「\n」/置換 ...
文字列を改行するには、改行コードの「\n」を入力する必要がある

// 厳格モード
'use strict'; //先頭に記載

// 変数はいま見たように、値を後で何回でも再代入できたり、宣言するときには値を代入しなくてもよい、という点が定数と異なります。

// 150	1.1 ⇔ 定数/変数
リテラルは文字通りのという意味ですね。


// モーダルウィンドウ
左右中央に配置　絶対配置の場合は left: 0; 、 right: 0; としたあとに左右の margin を auto にすることで中央揃えにできる

//変数
let price;
//定数
const rate = 1.1;


------------------------------------------------------
// JavaScript入門 fetch API編


// 処理が終わるまで待つ
最近だとasync, await を使用するのが一般的
thenを使っていたりもする

関数式の場合のasyncの位置に注意
  const showUsers = async () => {
    try {
      const response = await fetch('https://dotinstall.github.io/setup/fetchapi/users.json');
      const users = await response.json();
      console.log(users);
    } catch (err) {
      console.log('Something went wrong getting user data');
      console.log('Error log: ' + err);
    }
  };

  // async function showUsers() {

  // }


文字列に対して配列に使える命令である、forEach() や push() などを使うことはできない。



基本定数使う
値の再代入がどうしても必要な時だけ変数を使う

price++; //変数に1足す

× const rate;
× var（変数宣言だが古い書き方なので使わない）


===
!==

const score = Number(prompt('Score?'));

if (score >= 90) {
  console.log('A!');
} else if (score >= 70) {
  console.log('B!');
} else {
  console.log('C!');
}


要素を取得するには querySelector() と querySelectorAll()　→　新しい
getElementById() →　古い



レスト構文は値を受け取ってまとめるためのものなので、今回のような代入式だったら、左辺で使われればレスト構文になります。
一方、スプレッド構文は要素を取り出して広げるためのものなので、今回のような代入式だったら、右辺で使われればスプレッド構文になります。


// 整数への変換
Math.ceil(1.6)　上方向
Math.floor(1.6)　下方向
Math.round(1.6)　1.5以上　上方向　それ未満は下方向

// 3桁ごとに小数点
console.log(`USD: ${Number(amount).toLocaleString()}`);

// focus
'use strict';

{
  document.querySelector('input').addEventListener('focus', () => {
    document.querySelector('p').textContent = 'English only!';
  });

  document.querySelector('input').addEventListener('blur', () => {
    document.querySelector('p').textContent = '';
  });
  
    document.querySelector('input').focus();
}

// 要素.同名のキーワード = 値
// キーワードにclassは使えない
document.querySelector('p').className = 'red-border';
document.querySelector('p').className = 'red-border pink-bg';
document.querySelector('p').classList.add('red-border');
document.querySelector('button').disabled = false;

// JSのキーワードに-が入っている場合、-を削って次の文字の先頭を大文字にしなければならない


既定の動作を防ぐ
e.preventDefault();


// データ型
まず false になる値は真偽値の false、数値だと 0 、-0 、そして NaN という特殊な数値、文字列だと空文字、そしてあとで見ていく undefined と null になります。

一方、true になる値は真偽値の true をはじめ、これら以外の全てなのですが、間違いやすいところで言えば空白だけが入った文字列、空の配列や空のオブジェクトは false ではなく true になるので注意しておきましょう。


// データ構造
オブジェクトの中身を変更するだけだったら、constで変更してもよい
dはオブジェクトと同じ扱い

// 日付操作


{
  // 再帰関数
  function showClock() {
    setTimeout(() => {
      console.log(new Date());
      showClock();
    }, 1000);
  }

  showClock();
}


//どのくらい時間がたったか
'use strict';

{
  // 2023 6 10
  // new Date() - new Date(2023, 5, 10)
  // const diff = new Date().getTime() - new Date(2023, 5, 10).getTime();
  const diff = Date.now() - new Date(2023, 5, 10).getTime();
  const days = Math.floor(diff / 1000 / 60 / 60 /24);

  console.log(diff);
  console.log(days);
}


'use strict';

{
  // 2000 4 11
  const d = new Date(2000, 3, 11);

  console.log(d);
  // UTC
  // 1970101/01/ 00:00:00
  // Unix Timestamp
  console.log(d.getTime());

  const d2 = new Date(d.getTime() + 1000);
  console.log(d2);
}

'use strict';

{
  const d = new Date();
  console.log(d);
  console.log(d.toLocaleString());
  console.log(d.getFullYear());
  console.log(d.getMonth()); // 0, 1, 2, ...
  console.log(d.getDate());
  console.log(d.getHours());
  console.log(d.getMinutes());
  console.log(d.getSeconds());
  console.log(d.getMilliseconds());
  console.log(d.getDay()); // 0, 1, 2, ...
}


'use strict';

{
  // const double = (num) => {
  //   return num * 2;
  // };
  
  // const calc = function(num, func) {
  //     return func(num);
  // };


  const calc = (num, func) => {
    return func(num);
  };

  // console.log(calc(20, double));
  console.log(calc(20, (num) => {
    return num * 2;
  }));
}

'use strict';
{
  const calc = (20, func) => {
    return func(20);
  };
  console.log(
    calc(
      20,
      noname(value) {
        return value * 2;
      }
    )
  );
}
      noname(value) {
        return value * 2;
      }
      func = noname;
      func(20);




VSCode
インデント、空白揃える
適当なところで右クリック→ドキュメントのフォーマットという機能があるので、こちらを選択しましょう。

break、continue は、for だけでなく、while や、do...while でも使うことができます。

プログラミングの極意
情報の入手、情報の整理、情報の組み合わせ。


?ビット演算子

関数の巻き上げ
関数宣言は実はコードのどこに書いても実行時にはコードの先頭に書いたことになるという仕様になっているからですね。


余白 → 8、16の倍数を使うと綺麗に揃うと聞くので、その数値で指定

フォント → リストが表示された時に文字がきれいに揃うものが良いと考えて、等幅フォントかつドットインストールのレッスンでも使われているプログラミング用フォントの「Ricty Diminished」を使用


PHP 入門の件、
↓定番や、わかりやすい入門だとこのへん
https://www.javadrive.jp/php/
https://bashalog.c-brains.jp/category/series/php/
ただ、前者サイトの「クラスとは何か」から先、後者サイトの「8回目 データの受け取り」から先は特に仕入れる必要はない。知っていて損はないけど。
WordPress の内部構造まで、get_なんちゃらと the_なんちゃらの違いは何なんだ、function.php もゴリゴリ書きたい・・・というレベルまで目指すなら、前者は「クラスの定義」までの理解を要する。
「完全に理解した」までは行かずともなんとなく触れておくだけで大分違うはず。
▽
↓講座から更に深く知りたい何かがあれば PHP 開発元のリファレンスも。
https://www.php.net/manual/ja/index.php

$変数名 = 値;

変数名として利用できる文字列は先頭がアンダーバーかアルファベットで始まり、その後にアンダーバー、数字、アルファベットが続くものです。

$name
$_pref_name
$year2008

変数名では大文字と小文字は区別されます。数字やアンダーバー以外の記号で変数名を始めることは出来ませんので注意して下さい。

比較演算子
==	a == b	bとaの値が等しい
===	a === b	bとaの値が等しく型も等しい
!=	a != b	bとaの値が等しくない
<>	a <> b	bとaの値が等しくない
!==	a !== b	bとaの値または型が等しくない

論理演算子
&& 又は and	a && b	aとbが共に真の場合に真
|| 又は or	a || b	aかbの少なくとも1つが真の場合に真
xor	a || b	aかbのどちらか1つだけが真の場合に真
!	!a	aが真の時に偽、偽の時に真


Local環境にあるWordPressをそのまま本番環境に移行できる便利な方法があります。
その方法とは、プラグインの「All-in-One WP Migration」を使用した方法です。


----------------------------------------------------------
「CSS アニメーション」

コピペで良いので JavaScript を使った色々な仕掛け（クリックすると画像がポップアップする、スクロールとともに要素が画面下から浮かび上がってくる等々・・・）
他にも WordPress などは心得がありますでしょうか。
そのあたりの知見を広げてもらえると助かります。
詳しい題材は大谷さんにお任せです。役に立ちそうな、あるいは興味のある分野をご自身で選んでください。
そして毎日とは言いません、極論、手のかかる課題であれば週に１度でも良いので、「こんなのできましたー」というものを日報に上げていただければと思います。


// .activeが付いていない a に hover すると...という意
.menu li a:not(.active):hover {
  opacity: .5;
  transition: opacity .4s;
}


要素の左上を基点にしたかったら、transform-origin というプロパティを使うことが出来て、左上だと top left とすれば OK です。
transform-origin: top left;
（translate はどこを基準にしても単に平行移動するだけなので、transform-origin の影響を受けることはない）

transform: translateX(100px) rotate(45deg);
transform: rotate(45deg) translateX(100px);
変形ですが、右から左に適用されていきます。上の例だと結果が異なる


/* transition-property: transform; */
/* transition-duration: 2s; */
/* transition-timing-function: linear; */
/* transition-delay: 1s; */

上記の一括指定プロパティ
transition: transform 2s linear 1s;


transition-timing-function: linear; // 	等速
以下は動き始めと途中のスピードが異なる
ease
ease-out
ease-in-out


.box {
  width: 80px;
  height: 80px;
  background: pink;
  /* transition: transform 1s; */
  /* transition: border-radius 1s; */
  transition: transform 1s, border-radius 1s; // カンマ区切りで複数のプロパティのtransitionを設定できる
}

.box:hover {
  transform: translateX(100px);
  border-radius: 50%;
}


★animationプロパティの使い方の例

.box {
  width: 80px;
  height: 80px;
  background: pink;
  /* animation-name: move-around; */
  /* animation-duration: 4s; */
  /* animation-iteration-count: infinite; */
  /* animation-delay: 1s; */
  /* animation-direction: alternate; */
  animation: move-around 4s infinite 1s alternate; //逆再生
}

@keyframes move-around {
  25% {
    transform: translate(100px, 0);
    border-radius: 0;
  }
  50% {
    transform: translate(100px, 100px);
    border-radius: 50%;
  }
  75% {
    transform: translate(0, 100px);
    border-radius: 0;
  }
}


// 等速で動き続ける
  animation: spin 800ms infinite linear;
  /* animation-timing-function: linear; */

animation: popup 2s forwards; // アニメーションが終わった後、そのままの状態をキープ


pointer-eventsを none にすればマウスイベントの対象外になって、無視されるようになるので、その下の要素がクリックできるようになる


all: unset; その要素に設定されたプロパティは全て初期値に戻し親要素から継承されるプロパティはそのまま継承されます。
-----------------------------------------------------------

JavaScript のコードはできる限り HTML ページの最後、例えば </body> タグの直前に記述することが望ましいと言われています。

半角のアルファベット、_（アンダースコア）、$（ダラー）、数字を組み合わせた名前にする
変数名は数字から開始できない
予約語と被る名前は利用できない
変数の名前は、半角のアルファベットであるAからZ（大文字）とaからz（小文字）、_（アンダースコア）、$（ダラー）、数字の0から9を組み合わせた名前にします。 JavaScriptでは、アルファベットの大文字と小文字は区別されます。


@media screen and (min-width:480px) {
  /* 480px以上の時（HPサイズの時） */
  .mainvisual {
    height: 100%;
  }
}

tb版
maxとminを指定


余白の占有率
flex-grow: 1;
https://qiita.com/maaaashi/items/13cdf02c394cf9668de7


Company2

メインページ、新着情報（NEWS）、お問い合わせ（inquiry）の3ページ構成です。ABOUT、BUSINESS、COMPANYはダミーリンクで構いません。


artis.kyosuke0530@gmail.com


スクショ
「Windowsキー」+「Shift」+「s」

---------------------------------------------------------------------
●JS

★ドットインストール
#14 オブジェクトの値を集計してみよう
#18 map()で新しい配列を作ってみよう


// 既定の動作をキャンセル
e = イベントオブジェクト

item.addEventListener('click', e => {
      e.preventDefault();
});


parentNode → 親要素

★querySelector()とquerySelectorAll()の違い
querySelector()の戻り値はElementオブジェクトで、 単一の要素が返ってきます。
一方、querySelectorAll()の戻り値はNodeListオブジェクトで、 複数の要素が返ってきます。
取得する要素が1つとわかっている場合や、最初の1つだけを取得したい場合は querySelector()を使い、それ以外はquerySelectorAll()を使います。

NodeList も配列の様に扱うことができます．

一般的な繰り返し処理に関しては for 文を用い，配列の各要素に対して何かの処理を行いたい場合は forEach() を用いるのが良いですね．

forEach() と for() の違いとしては、for() では何らかの条件でループから抜けるために break を使う事ができましたが、forEach() では途中でループを抜ける事ができない、という違いがあります

splice()　//途中に要素の追加や削除



REPL機能
Firefoxの開発者ツール
ショートカット Ctrl+Shift+K（macOS では Command+Option+K）

FA
art
Kyo3969&0193foN


模写コーディングリスト

https://dezafacore.com/yutapro/mosya1
https://dezafacore.com/yutapro/mosya2



プログラミング・サクセスURL

http://dezafacore.com/yutapro


パスワード

yuta3680



完全マスターコース会員サイト

http://dezafacore.com/yuproper


パスワード

jht67uw3ef


★質問
yuprogu.sitsu@gmail.com


https://feelings69.com/wp-admin
feelings_otani
Kyo3969&0193feE

https://feelings69.com/


縦並び・上下中央揃え
display: flex;
flex-flow: column;
justify-content: center;


vertical-align: middle;
リセットCSSにimgにvertical-align: bottom;付いている


「vh」とは Viewport Height（ビューポートの高さ）の略で、画面の高さを基準に大きさを指定する単位です。 1vhは画面高さの1%を表します。 これも「vw」と同じく、画面の高さに合わせて要素の大きさを調整できるので、レスポンシブデザインに適しています。

リセットCSSはどこに書きますか？
リセットCSSを使うときは通常のstyle.cssと同じようにheadタグ内で読み込めば良いのですが、必ず他のCSSファイルよりも前に読み込む必要があります。 後から自作CSSのスタイルで上書きするためです。 この場合は「reset.css」の記述を一番上にします。


flex-direction
https://developer.mozilla.org/ja/docs/Web/CSS/flex-direction

要素一つだけdisplay: flex;
→その要素事体にdisplay: flex;を指定する

メディアクエリの基礎　ポートフォリオ制作３

/* 768px以下の時（スマホサイズの時） */
.test {
  font-size: 20px;
  height: 200px;
  background-color: yellow;
}
  
@media screen and (min-width:768px) {
  /* 768px以上の時（タブレットサイズの時） */
  .test {
    font-size: 40px;
    height: 400px;
    background-color: greenyellow;
  }
  /* タブレットのサイズ　768px-1024px */
  }
  
@media screen and (min-width:1025px) {
  /* 1025px以上の時（PCサイズの時） */
  .test {
    font-size: 60px;
    height: 600px;
    background-color: green;
  }
}  


コーポレートサイトの作り方⑧～


<textarea name="message" cols="50" rows="5"><?php print(htmlspecialchars($message,ENT_QUOTES)); ?></textarea>

if(ini_set('session.use_cookies',''))


https://www.instagram.accounts/manage_access

suzuki@test.com
23456

yamada@test.com
34567

あっしゅくま
画像圧縮

min_bbs
PC>Local Disc(C:)>MAMP>htdocs>

このページは動作していません
localhost では現在このリクエストを処理できません。
HTTP ERROR 500
と表示されます。

http://localhost/min_bbs/join/check.php
phpMyAdminにもデータが入りません。

消費者センター

http://localhost/min_bbs/join/

9/25
SEO講座　ひと回し終わり

10/23
PHP&SQL演習⑭最後まで

10/17
PHP&SQL演習⑯終わりまで


SELECT item_name,SUM(COUNT)FROM my_items LEFT JOIN carts ON my_items.id=carts.item_id GROUP BY carts.item_id;


PHP&SQL講座⑩
2:23

INSERT INTO my_items SET maker_id=1,item_name="もも",item_name_kana,price=210


'件のデータを挿入しました';

phpMyAdmin
3306


phpMyAdmin
port:99

http://localhost:99/phpMyAdmin/




見積書と請求書の作り方・金額設定について


local wordpress ログイン後の管理画面開くには、WP Adminを押す
以下、補足
wp user update dev-email@wpengine.local --user_pass=kyo39690193adm

Local
Kyo3969&0193loC

4649596339690193


functions.php
最後の 　?>　不要

郵便番号


コンタクトフォーム７
完全マスターコース
ワードプレスのオリジナルテーマを作成しよう！　２５


<?php
$zip = '１１１－１１１１';

$zip = mb_convert_kana($zip,'a','UTF-8');
if (preg_match("/\A\d{3}[-]\d{4}\z/",$zip)){
  print('郵便番号：〒'.$zip);
} else{
  print('※郵便番号が正しくありません');
}

?>


入力されたものを数字かどうか判断する
全角の数字は半角に直して表示する

<?php
$age = 20;

$age = mb_convert_kana($age,'n','UTF-8');
if(is_numeric($age)){
  print($age. '歳です');
} else {
  print('※年齢が数字ではありません');
}
?>


IF構文

順次
繰り返し
選択

制御構造

php講座19
更新ボタン押す！


・＜
「＜」は「小なり」と読み、左側の数が右側の数より小さい場合に使用されます。
例えば【ａ＜ｂ】の場合、【ａ小なりｂ】と読み、意味は【ａはｂより小さい】となります。

・＞
「＞」は「大なり」と読み、左側の数が右側の数より大きい場合に使用されます。
例えば【ａ＞ｂ】の場合、【ａ大なりｂ】と読み、意味は【ａはｂより大きい】となります。

・≦
「≦」は「小なりイコール」と読みます。不等号と等号を合わせた記号で、左側の数が右側の数より小さいまたは同じ場合に使用されます。
例えば【ａ≦ｂ】の場合、【ａ小なりイコールｂ】と読み、意味は【ａはｂより小さいまたは同じ】となります。

・≧
「≧」は「大なりイコール」と読みます。不等号と等号を合わせた記号で、左側の数が右側の数より大きいまたは同じ場合に使用されます。
例えば【ａ≧ｂ】の場合、【ａ大なりイコールｂ】と読み、意味は【ａはｂより大きいまたは同じ】となります。


初期化処理
while(繰り返す条件){
  繰り返したい処理
  更新処理
}


for(初期化処理;繰り返す条件;更新処理){
  繰り返したい処理
}

for($i=1;$i<=365;$i++){
  print($i."<br>");
}


for($i=0;$i<=365; $i++){
  print(date('n/j(D)',strtotime('+. $i . 1day')));
  print('<br>');
}


比較演算子

<>（より多い、より少ない）
<= >=（以上、以下）
===　等しい
!==　異なる

!A　Aではない

$i += 1;
$i++; インクリメント

$i -= 1;
$i --;　デクリメント

$i *= 1;
$i /= 1;

%は余り


CDNはJSの記述より上に貼り付ける


開始ボタン
onclick

画像をランダムに流す
Math.random()
Math.floor()

-------------------------------------------------------------
DOMとは？
「Document Object Model」の略、「ドキュメントを物として扱うモデル」
の意味
ブラウザですが、 HTML を読み込むと実は内部的に Document Object Model もしくは DOM と呼ばれるデータ構造が作られて、その内容に応じてページが描画がされる、という仕組みになっています。

JavaScript が操作しているのは、あくまで DOM であって HTML のほうではない点に注意しておきましょう。

文書内の改行や空白も Node になるので、今回だとこちらの改行とこちらの字下げの空白もひとつの Node になっている点に注意してください。

 html 要素内の先頭と末尾のこれらは Node にならないというルールになっているので注意しておきましょう。

 Parent Node（親） 、 Child Node（子）、Sibling Node（兄弟）

querySelector() は指定したセレクターで見つかった要素のうち最初のものだけしか取得できない。


querySelectorAll() で取得した値には forEach() を使うことができます。


{
  function update() {
    // document.getElementById('target').textContent = 'Changed!';
    // document.querySelector('p').textContent = 'Changed!';
    // document.querySelectorAll('p')[1].textContent = 'Changed!';
    document.querySelectorAll('p').forEach((p, index) => {
      p.textContent = `${index} 番目のpです!`;
    });
  }

  setTimeout(update, 1000);
}


// #targetが付いているノードの文字を Dotinstall に変える
{
  document.querySelector('button').addEventListener('click', () => {
    const targetNode = document.getElementById('target');

    targetNode.textContent = 'Dotinstall';
  });
}


ul.childNodes // 全ての子 Node を取得
ul.children //テキスト Node を無視して、要素 Node だけを取得したいという場合
ul.firstChild // 最初の子 Node
ul.lastChild // 最後の子 Node

ul.firstElementChild // 最初の要素 Node だけ取得したい場合
ul.lastElementChild // 最後の要素 Node だけ取得したい場合

li.parentNode // 親 Node を取得

li.previousSibling // 1 つ前の兄弟 Node を取得
li.nextSibling // 1 つあとの兄弟 Node を取得
ここでも要素 Node だけ取得したい場合は、 previousElementSibling 、 nextElementSibling を使えば OK です。


スタイルに関しては、 JavaScript でこのように書いてしまうと、 CSS との役割分担があいまいになるので、見た目の指定は CSS に任せて、 JavaScript では class 属性の操作だけを書く方法が一般的です


const item2 = document.createElement('li'); // li を作成


append → 付け加える、付加する、付け足す、添える
ul.appendChild(item2); // ul の子要素の末尾に items2 を追加


{
  document.querySelector('button').addEventListener('click', () => {
    const item0 = document.querySelectorAll('li')[0]; // li の0番目を定数 item0 へ
    const copy = item0.cloneNode(true); // item0 を複製　()内、trueにしないと空になる

    const ul = document.querySelector('ul');
    const item2 = document.querySelectorAll('li')[2];
    ul.insertBefore(copy, item2); // copy を item2 の前に挿入
  });
}


{
  document.querySelector('button').addEventListener('click', () => {
    const item1 = document.querySelectorAll('li')[1];

    // item1.remove();
    // 親Node.removeChild(削除するNode) // 古いブラウザに対応した方法
    document.querySelector('ul').removeChild(item1);
  });
}


// input
{
  document.querySelector('button').addEventListener('click', () => {
    const li = document.createElement('li');
    const text = document.querySelector('input');
    li.textContent = text.value;
    document.querySelector('ul').appendChild(li);

    text.value = '';
    text.focus();
  });
}


-------------------------------------------------------------

引数→関数の()に入るもの　arg


①奇数と偶数の表し方　%
偶数（2,4,6,8...）→　number % 2  ===0
奇数（1,3,5,7...）→　number % 2  !==0

③ネスト→入れ子

④無名関数...名前を付けずに関数を定義する


メソッドとは、オブジェクトのプロパティに代入された「関数」
→つまり、複数の処理がひとまとまりになったもの

⑤コールバック関数
コールバック関数...「呼び戻す」「引数として渡される関数」

⑥forEach...配列の中身を１つずつ取り出す





配列①
const address = ['東京','大阪','愛知']
const number = [1,2,3]

配列②
const address = new Array('東京','大阪','愛知')

ブラウザに元から用意されているオブジェクト
window
1 document（HTML情報をもつ）
2 location（位置情報をもつ）
3 histry（履歴をつかさどる）
4  matchMedia（window幅を参照する）


const apple={
  color: 'red',//プロパティ
  shape: 'round',
  genre: 'fruit'


JS
break...処理を止める
continue...命令を飛ばして続行する
scope...関数の中で定義した変数を外で使うことはできない
	同じ名前の変数があった場合、関数内では近い方が実行される


background-image: url(../images/cat2.png);
  background-position: center;
  background-size: cover;


  background-image: url(../images/cat2.png);
  background-position: center;
  /* 背景画像の位置を変更できる */
  background-size: contain;
  /* 背景画像の画像比率を保ったまま、サイズを合わせる */
  background-repeat: no-repeat;
  /* 繰り返しをやめる */
  background-attachment: fixed;
  /* スクロールしても背景画像を固定 */


フレックスコンテナ　親要素
フレックスアイテム　子要素
基本
inlineは横に並ぶ
blockは縦に並ぶ

  df+
　flex-direction: column;
　縦に並ぶ

order: x;
並び順を指定


リストの点を中に入れる
  list-style-position: inside;


odd　奇数
.test ul li:nth-child(odd) 
even　偶数


上下中央寄せ
.item p {
  background: lightpink;
  text-align: center;
  height: 300px;
  line-height: 300px;
}



トランジション

.test p {
  background: lightpink;
  /* transition-property: all; */
  /* 変更する要素の設定 */
  /* transition-delay: 1s; */
  /* アニメーションを開始するまでの時間 */
  /* transition-duration: 1s; */
  /* アニメーションの時間 */
  /* transition-timing-function: ease; */
  /* アニメーションの変化の度合(初期値でease) */
  transition: all 1s linear;
}
.test p:hover {
  background: lightskyblue;
}


.test p {
  background: lightpink;
  /* transition-property: all; */
  /* 変更する要素の設定 */
  /* transition-delay: 1s; */
  /* アニメーションを開始するまでの時間 */
  /* transition-duration: 1s; */
  /* アニメーションの時間 */
  /* transition-timing-function: ease; */
  /* アニメーションの変化の度合(初期値でease) */
  opacity: 0;
  /* 要素を透明にする */
  transition: all 1s linear;
}
.test p:hover {
  background: lightskyblue;
  opacity: 1;
  /* 要素を表示させる */
}


  position: relative;
  /* relativeは相対指定、指定した自身の位置を変えることができる */


上下左右中央寄せ
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);


上下左右中央寄せ２
  display: flex;
  align-items: center;
  justify-content: center;


上下左右中央寄せ３
position: relative;
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);


imgタグをdivで囲うと扱いやすい
.img {
  width: 40%;
  height: 400px;
}
.img img {
  min-width: 200px;
  width: 100%;
  height: 100%;
  object-fit: cover;
}


grid-area

.container {
  display: grid;
  grid-template-columns: auto 200px;
  /* 2列作成(左からauto,200px) */
  grid-template-rows: 80px auto 100px;
  /* 3行作成(上から80px,auto,100px) */
  grid-template-areas: 
    "header header"
    "main sidebar"
    "footer footer";
}

.header {
  background: lightskyblue;
  grid-area: header;
}

.main {
  background: lightgreen;
  grid-area: main;
}

.sidebar {
  background: lightgray;
  grid-area: sidebar
}

.footer {
  background: lightsalmon;
  grid-area: footer;
}

レスポンシブ

@media (max-width:600px) {
  .container {
    grid-template-areas: 
      "header"
      "main"
      "sidebar"
      "footer";
      grid-template-columns: auto;
      grid-template-rows: 80px auto auto 200px;
  }
}


アニメーション

.zoom {
  width: 50%;
  margin: 0 auto;
  overflow: hidden;
  /* はみ出た要素をカット */
}
.zoom img {
  width: 100%;
  height: 100%;
  transition: 1s all;
  filter: drop-shadow(20px 20px 10px #222);
}
.zoom img:hover {
  transform: scale(1.2,1.2);
  /* 拡大する */
  transition: 1s all;
}


グラデーション

.gradation p {
  color: blue;
  /* もしブラウザが非対応なら色を青くする */
  font-size: 5rem;
  font-weight: 900;
  background: linear-gradient(0deg,red,blue);
  /* 背景のグラデーションを実装 */
  -webkit-background-clip: text;
  /* テキストの部分だけ切り取る */
  -webkit-text-fill-color: transparent;
  /* 切り取った部分を背景として使用 */
}

文字の背景に画像を挿入
background: url(../images/background.jpg);


テキストにマーカーを引く
.gradation span {
  background: linear-gradient(transparent 60%,lightpink 60%);
  /* transparentはマーカーの太さ */
  /* lightpink 60%は色の濃さ */
}


カルク
width: calc(100% - 200px);


width=50%

:root {
  --main-color: blue;
  /* --**-**は変数 */
  --calc-3:calc(100% / 2);
}

.custom p {
  font-size: 2rem;
  color: var(--main-color);
  /* 変数を呼び出すときは「var」を使う */
  background: lightcyan;
  width: var(--calc-3);
}


カスタム変数
（カウンター）
.function ul {
  counter-reset: number 0;
  /* カウントする値を初期化 */
  /* 変数のようなもの */
  /* numberという変数に0を代入 */
}

.function li {
  list-style-position: inside;
  font-size: 3rem;
}

.function li:before {
  counter-increment: number 1;
  /* カウントする増加数をセット */
  content: "手順" counter(number);
  /* numberに入っている数字を表示 */
}


ポートフォリオを増やそう！ 11
画像のスライダー

jquery講座③
ハンバーガーメニュー

jquery講座⑤
アコーディオンメニュー


サーバーを契約して...

月10万円を稼ぐまでの学習ロードマップ

WordPress
時給をMAX...

●チャットワーク登録


div#○〇
<div id="id"></div>


@use 読み込み
_省略できる
.scss省略できる

@use "./variables" as var;

.container {
  &__image {
    color: var.$pink;
  }
  &__body {
    color: var.$green;
  }
}


@mixin

@mixin flexbox($justify-content,$color){
  display: flex;
  justify-content: $justify-content;
  align-items: center;
  color: $color;
}

.container {
  @include flexbox(center,red);
}

.sub-container {
  @include flexbox(space-around,green);
  margin-top: 100px;
}

.item {
  width: 100px;
  height: 100px;
  background-color: lightpink;
}


//変数を定義
$tb: 700px;
$pc: 1000px;

@mixin tb() {
  @media (min-width: $tb) {
    @content;
  }
}

//mixinを定義
@mixin pc() {
  @media (min-width:$pc) {
    @content;
  }
}

.container {
  width: 500px;
  height: 500px;
  background-color: lightpink;
  @include tb(){
    background-color: lightgreen;
  }
  @include pc() {
    background-color: lightgray;
  }
}


fontawesome
右上アイコン→manage kits→mukit→JS埋め込みコード　ボディの終わりにコピー

displayflex 要素が一つでも使える

background-size: cover;
background-position: center;


hタグの中はインライン要素であるspanタグで装飾するのが一般的

blockの場合、text-align:centerやvertical-align:middleを指定しても、
要素が真ん中に表示されるようにはなりません
（要素の中身のテキストは中央揃えになりますが）。

Bootstrap
Sticky top
スクロールした後, 要素をviewportの上部に配置します。 
.sticky-top ユーティリティはCSSの position：sticky を使用しますが、
これはすべてのブラウザーで完全にサポートされているわけではありません。

css
background-attachment: fixed;
背景画像の上を文字だけが滑っているように見えさせる

aタグの中、ページ内遷移はidで飛ばす

デデロッパツール
ctrl+shift+c

セレクタ{
プロパティ:値;
body{
color:red;

PCサイズからページを作るときは
max-widthを使うのが一般的

改行されるものはブロック要素

上下左右中央寄せ

    display: flex;
    align-items: center;
    justify-content: center;

グリッドシステム
便利なCSS４
display: grid;
    grid-template-columns: auto 350px 200px;
display: grid;でdisplay-flexの状態になる


aタグがインライン要素のためにmargin,paddingが効かないようです。
なのでインライン要素をブロック要素化することでpadding,marginが効くようになります。


.content {
  display: block;
  padding: 40px;
}

SCSS
.container {
  &__image {
    color: lightpink;
  }
  &__body {
    color: lightgreen;
  }

.container__image {
  color: lightpink;
}
.container__body {
  color: lightgreen;
}
}


wordpress講座③
プラグインについて

wordpress講座④
テーマについて

wordpress講座⑤
SSLの必要性、ファビコンについて

wordpress講座⑩
what's new
